// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ FAQ
const faqInstructions = {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç targetId
  getTargetElement(targetId) {
    let targetElement;
    let needsScroll = false;

    switch(targetId) {
      case 'langToggle':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('langToggleDesktop') : 
          document.getElementById('langToggle');
        break;
      case 'themeToggle':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('themeToggleDesktop') : 
          document.getElementById('themeToggle');
        break;
      case 'faqBtn':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('faqBtnDesktop') : 
          document.getElementById('faqBtnMobile');
        break;
      case 'healthTab':
        targetElement = document.querySelector('#sphereTabs .nav-link[data-bs-target="#healthTab"]');
        needsScroll = true;
        break;
      case 'timerBtn':
        targetElement = document.querySelector('.timer-button');
        break;
      case 'loginBtn':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('loginBtn') : 
          document.getElementById('mobile-login-btn');
        needsScroll = true;
        break;
      case 'saveToCloudBtn':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('saveToCloudBtn') : 
          document.getElementById('mobile-save-btn');
        needsScroll = true;
        break;
      case 'showResultsBtn':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('showResultsBtn') : 
          document.getElementById('mobile-view-btn');
        needsScroll = true;
        break;
      case 'savePDF':
        targetElement = window.innerWidth > 576 ? 
          document.getElementById('savePDF') : 
          document.getElementById('savePDFMobile');
        needsScroll = true;
        break;
      default:
        targetElement = document.getElementById(targetId);
    }
    return { targetElement, needsScroll };
  },
  ru: `<strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mentorist Life Balance Wheel!</strong><br><br>
  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∂–∏–∑–Ω–∏ –ø–æ 8 —Å—Ñ–µ—Ä–∞–º: üéØ –ü—Ä–∏–∑–≤–∞–Ω–∏–µ, ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è, üè° –û–∫—Ä—É–∂–µ–Ω–∏–µ, üí∞ –§–∏–Ω–∞–Ω—Å—ã, üìö –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, üéâ –Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏, üåÄ –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å –∏ ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ.<br><br>
  <strong>1. –¢–µ–º–∞ –∏ —è–∑—ã–∫:</strong> <span class="btn-like lang-toggle">üåê RU</span> –∏ <span class="btn-like theme-toggle">üåô –¢—ë–º–Ω–∞—è</span> / <span class="btn-like theme-toggle">üåû –°–≤–µ—Ç–ª–∞—è</span>.<br><br>
  <strong>2. –ù–∞–≤–∏–≥–∞—Ü–∏—è:</strong> <span class="btn-like faq-button">üí° FAQ</span> –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, <span class="btn-like faq-health-button">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ (5.0)</span> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ñ–µ—Ä–∞–º, –≤–∫–ª–∞–¥–∫–∏ –≤–≤–µ—Ä—Ö—É –∏ –∫–ª–∏–∫ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º –∫–æ–ª–µ—Å–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ñ–µ—Ä.<br><br>
  <strong>3. –û—Ü–µ–Ω–∫–∞:</strong> –í –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ 5 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ —Å–ª–∞–π–¥–µ—Ä–∞—Ö –æ—Ç 0 –¥–æ 10. –≠–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ <span class="btn-like faq-timer-button">‚è±Ô∏è</span> –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –≥–¥–µ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∑–∞ 10 –º–∏–Ω—É—Ç.<br><br>
  <strong>4. –ü–æ–¥—Å–∫–∞–∑–∫–∏:</strong> –õ–µ—Ç–∞—é—â–∏–π –∫—Ä—É–∂–æ—á–µ–∫ —Ä—è–¥–æ–º —Å –∫—É—Ä—Å–æ—Ä–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π —Å—Ñ–µ—Ä–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.<br><br>
  <strong>5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ö–æ–ª–µ—Å–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏ –æ–±—â–µ–µ.<br><br>
  <strong>6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> <span class="btn-like">üë§ –í–æ–π—Ç–∏</span> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ö–Ω–æ–ø–∫–∏: <span class="btn-like">üíæ</span> (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ), <span class="btn-like">‚òÅÔ∏è</span> (–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞), <span class="btn-like">üîΩ PDF</span> (—Å–∫–∞—á–∞—Ç—å).<br><br>
  <strong>7. –ò—Å—Ç–æ—Ä–∏—è:</strong> –°–ª–∞–π–¥–µ—Ä –ø–æ–¥ –∫–æ–ª–µ—Å–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`,

en: `<strong>Welcome to Mentorist Life Balance Wheel!</strong><br><br>
  Tool for assessing life balance across 8 areas: üéØ Calling, ü§ù Relationships, üè° Environment, üí∞ Finance, üìö Self-Improvement, üéâ Life Brightness, üåÄ Spirituality, and ‚ù§Ô∏è Health.<br><br>
  <strong>1. Theme and Language:</strong> <span class="btn-like lang-toggle">üåê EN</span> and <span class="btn-like theme-toggle">üåô Dark</span> / <span class="btn-like theme-toggle">üåû Light</span>.<br><br>
  <strong>2. Navigation:</strong> <span class="btn-like faq-button">üí° FAQ</span> for instructions, <span class="btn-like faq-health-button">‚ù§Ô∏è Health (5.0)</span> to return to spheres, top tabs and clicking wheel sectors to switch between areas.<br><br>
  <strong>3. Assessment:</strong> Each area features 5 statements to evaluate using sliders from 0 to 10. Clock emoji <span class="btn-like faq-timer-button">‚è±Ô∏è</span> activates focused mode where you assess all statements in all areas within 10 minutes.<br><br>
  <strong>4. Tips:</strong> The floating circle near your cursor shows a simple action you can take in the current area right now.<br><br>
  <strong>5. Visualization:</strong> Wheel displays your ratings and automatic averages for each area and overall.<br><br>
  <strong>6. Saving:</strong> <span class="btn-like">üë§ Login</span> to save. Buttons: <span class="btn-like">üíæ</span> (save to cloud), <span class="btn-like">‚òÅÔ∏è</span> (load from cloud), <span class="btn-like">üîΩ PDF</span> (download).<br><br>
  <strong>7. History:</strong> Slider below wheel to view saved results.`
};

// –ò–º–ø–æ—Ä—Ç auth –∏–∑ firebase-init.js
import { auth } from "./firebase-init.js";
import { DejaVuSansTTF } from './fonts.js';
import { spheres } from './js/spheres.js';
import { initFloatingTooltip } from './js/floating-tooltip.js';
import { highlightElement } from './js/highlight-element.js';

// –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ firebase/auth
import {
  signOut,
  onAuthStateChanged,
  getRedirectResult
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
import { signInWithGoogle } from './auth.js';

import {
  saveResultToFirestore,
  loadResultsList,
  loadSavedResult,
  deleteSavedResult
} from "./firestore-utils.js";

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
function saveSettingsToLocalStorage(language, isDarkMode) {
  try {
    localStorage.setItem('balanceWheel_language', language);
    localStorage.setItem('balanceWheel_darkMode', isDarkMode ? 'true' : 'false');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', { language, isDarkMode });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage:', error);
  }
}

function loadSettingsFromLocalStorage() {
  try {
    const savedLanguage = localStorage.getItem('balanceWheel_language');
    const savedDarkMode = localStorage.getItem('balanceWheel_darkMode');
    
    return {
      language: savedLanguage || 'en',
      darkMode: savedDarkMode === null ? true : savedDarkMode === 'true'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage:', error);
    return { language: 'en', darkMode: true };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
let darkMode = true;

document.addEventListener("DOMContentLoaded", () => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
  const savedSettings = loadSettingsFromLocalStorage();

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ FAQ
  document.addEventListener('click', (e) => {
    if (!e.target.classList.contains('btn-like')) return;
    
    const btnText = e.target.textContent.trim();
    const tooltipText = currentLanguage === 'ru' ? '—è –∑–¥–µ—Å—å' : 'I am here';
    let targetId;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º targetId –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if (btnText.includes('üåê')) targetId = 'langToggle';
    else if (btnText.includes('üåô') || btnText.includes('üåû')) targetId = 'themeToggle';
    else if (btnText.includes('üí°')) targetId = 'faqBtn';
    else if (btnText.includes('‚ù§Ô∏è')) targetId = 'healthTab';
    else if (btnText.includes('‚è±Ô∏è')) targetId = 'timerBtn';
    else if (btnText.includes('üë§')) targetId = 'loginBtn';
    else if (btnText.includes('üíæ')) targetId = 'saveToCloudBtn';
    else if (btnText.includes('‚òÅÔ∏è')) targetId = 'showResultsBtn';
    else if (btnText.includes('üîΩ')) targetId = 'savePDF';

    if (targetId) {
      const { targetElement, needsScroll } = faqInstructions.getTargetElement(targetId);
      if (targetElement) {
        // –ü–µ—Ä–µ–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ highlightElement, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        // —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ highlight-element.js
        highlightElement(targetElement, tooltipText, needsScroll);
      }
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  window.currentLanguage = savedSettings.language;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  darkMode = savedSettings.darkMode;
  document.body.classList.toggle("dark-mode", darkMode);
  
  showEmojiExplosion();

  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª–∫–∏ –ª–æ–≥–∏–Ω–∞
  const loginModalLabel = document.getElementById("loginModalLabel");
  const modalBodyText = document.querySelector("#loginModal .modal-body p");
  if (loginModalLabel) loginModalLabel.innerText = "Login";
  if (modalBodyText) modalBodyText.innerText = "Sign in with:";

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (window.DeviceOrientationEvent) {
    window.addEventListener('deviceorientation', rotateCanvas);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ PDF
  const savePDFMobileBtn = document.getElementById('savePDFMobile');
  if (savePDFMobileBtn) {
    savePDFMobileBtn.addEventListener('click', () => {
      const savePDFBtn = document.getElementById('savePDF');
      if (savePDFBtn) {
        savePDFBtn.click(); // –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∫–Ω–æ–ø–∫–µ
      }
    });
  }
  
  // –£–¥–∞–ª—è–µ–º "–∑–∞–≥—Ä—É–∑—á–∏–∫"
  const loader = document.getElementById("loader");
  if (loader) {
    loader.remove();
  }

  function initLoadingAnimation() {
    const colMd7 = document.querySelector('.col-md-7');
    const canvasWrapper = document.getElementById('canvas-wrapper');
    const faqContent = document.getElementById('faqContent');
    
    colMd7.classList.add('loading');
    canvasWrapper.classList.add('loading');
    faqContent.classList.add('loading');
    
    setTimeout(() => {
      colMd7.classList.remove('loading');
      canvasWrapper.classList.remove('loading');
      faqContent.classList.remove('loading');
    }, 50);
  }
  initLoadingAnimation();

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  let isMobile = window.innerWidth < 576;
  window.addEventListener("resize", () => {
    isMobile = window.innerWidth < 576;
  });

  function fillCanvasBackground(canvas, color) {
    const ctx = canvas.getContext("2d");
    ctx.save();
    ctx.globalCompositeOperation = "destination-over";
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
  }

  /***************************************************
   * 1. –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ: –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê + –ê–ù–ì–õ–ò–ô–°–ö–ò–ô
   ***************************************************/
  // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥—É–ª—è floating-tooltip.js
  window.wheelSectors = [];
  let wheelSectors = window.wheelSectors; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤ –∫–æ–ª–µ—Å–∞

  // –û–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞, –∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  const buttonTexts = {
    ru: {
      save: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      login: 'üë§ –í–æ–π—Ç–∏',
      logout: 'üë§ –í—ã–π—Ç–∏',
      view: '‚òÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
    },
    en: {
      save: 'üíæ Save',
      login: 'üë§ Login',
      logout: 'üë§ Logout',
      view: '‚òÅÔ∏è Results'
    }
  };

  // ================== –ë–õ–û–ö –° –ú–û–î–ê–õ–¨–ù–´–ú–ò –û–ö–ù–ê–ú–ò ==================
  const modalTranslations = {
    ru: {
      savedToCloud: "–£—Å–ø–µ—Ö",
      savedToCloudContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
      loaded: "–£—Å–ø–µ—Ö",
      loadedContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω",
      deleteConfirm: "–í–Ω–∏–º–∞–Ω–∏–µ",
      deleteConfirmContent: "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
      deleted: "–£—Å–ø–µ—Ö",
      deletedContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω",
      loginRequired: "–í—Ö–æ–¥",
      loginRequiredContent: "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!",
      myResults: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
      success: "–£—Å–ø–µ—Ö",
      delete: "–£–¥–∞–ª–∏—Ç—å",
      noResults: "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      load: "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
      cancel: "–û—Ç–º–µ–Ω–∞"
    },
    en: {
      savedToCloud: "Success",
      savedToCloudContent: "Result saved",
      loaded: "Success",
      loadedContent: "Result loaded",
      deleteConfirm: "Warning",
      deleteConfirmContent: "Delete result?",
      deleted: "Success",
      deletedContent: "Result deleted",
      loginRequired: "Login",
      loginRequiredContent: "Please log in first!",
      myResults: "Results",
      success: "Success",
      delete: "Delete",
      noResults: "No results",
      load: "Load",
      cancel: "Cancel"
    }
  };

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ID.  
   * messageKey ‚Äî –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'loginRequired'),
   * —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å –∏–∑ modalTranslations.
   */
  function showModal(modalId, messageKey = null) {
    const modal = document.getElementById(modalId);
    if (modal && messageKey) {
      const modalTitle = modal.querySelector('.modal-title');
      const modalBody = modal.querySelector('.modal-body');
      const translations = modalTranslations[currentLanguage];
      if (modalTitle) {
        modalTitle.textContent = translations[messageKey] || translations.success;
      }
      if (modalBody) {
        modalBody.textContent = translations[`${messageKey}Content`] || translations.success;
      }
    }
    if (modal) {
      new bootstrap.Modal(modal).show();
    }
  }

  /**
   * –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  function showConfirmDeleteModal(onConfirm) {
    const modal = document.getElementById('confirmDeleteModal');
    if (modal) {
      const translations = modalTranslations[currentLanguage];
      const modalTitle = modal.querySelector('.modal-title');
      const modalBody = modal.querySelector('.modal-body');
      const confirmBtn = modal.querySelector('.btn-danger');
      const cancelBtn = modal.querySelector('.btn-secondary');
      
      if (modalTitle) {
        modalTitle.textContent = translations.deleteConfirm;
      }
      if (modalBody) {
        modalBody.textContent = translations.deleteConfirmContent;
      }
      if (confirmBtn) {
        confirmBtn.textContent = translations.delete;
        confirmBtn.onclick = () => {
          const modalInstance = bootstrap.Modal.getInstance(modal);
          if (modalInstance) {
            modalInstance.hide();
          }
          onConfirm();
        };
      }
      if (cancelBtn) {
        cancelBtn.textContent = translations.cancel || 'Cancel';
      }
      new bootstrap.Modal(modal).show();
    }
  }
  // ==============================================================

  // ===================== –ë–õ–û–ö –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô =====================
  // –ö–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ (–¥–µ—Å–∫—Ç–æ–ø + –º–æ–±–∏–ª—å–Ω—ã–π)
  const loginBtn = document.getElementById("loginBtn");
  const mobileLoginBtn = document.getElementById('mobile-login-btn');

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–æ–≥–∏–Ω–∞
  const loginModalEl = document.getElementById("loginModal");

  // –ö–Ω–æ–ø–∫–∞ Google –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –º–æ–¥–∞–ª–∫–∏
  const googleSignInBtn = document.getElementById("googleSignInBtn");

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —à–∞–ø–∫–µ –¥–µ—Å–∫—Ç–æ–ø–∞ –∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
  const userInfo = document.getElementById("userInfo"); 
  const userInfoMobile = document.getElementById("userInfo-mobile"); 

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
  // –§—É–Ω–∫—Ü–∏—è signInWithGoogle –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ auth.js

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è ¬´–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google¬ª (–∫–Ω–æ–ø–∫–∞ –≤ –º–æ–¥–∞–ª–∫–µ `loginModal`)
  if (googleSignInBtn) {
    googleSignInBtn.addEventListener("click", async () => {
      try {
        const user = await signInWithGoogle();
        if (user) {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
          const loginModal = bootstrap.Modal.getInstance(loginModalEl);
          if (loginModal) {
            loginModal.hide();
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º UI-–∫–Ω–æ–ø–∫–∏ (–ª–æ–≥–∏–Ω/–ª–æ–≥–∞—É—Ç)
          updateLoginButtons();
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
      }
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  function handleSignOut() {
    signOut(auth)
      .then(() => {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        document.getElementById("historySliderContainer").classList.add("d-none");
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", err);
      });
  }

  // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Login/Logout (–¥–µ—Å–∫—Ç–æ–ø –∏ –º–æ–±–∏–ª—å–Ω–∞—è)
  let isLoginModalOpen = false;

  function handleLoginClick() {
      if (auth.currentUser) {
          // –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äì –≤—ã—Ö–æ–¥–∏–º
          handleSignOut();
      } else if (!isLoginModalOpen) {
          // –ù–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
          const loginModal = new bootstrap.Modal(loginModalEl, {
              backdrop: true,
              keyboard: true
          });
          loginModal.show();
          isLoginModalOpen = true;
  
          // –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
          loginModalEl.addEventListener('hidden.bs.modal', () => {
              isLoginModalOpen = false;
              document.body.classList.remove('modal-open');
              const backdrop = document.querySelector('.modal-backdrop');
              if (backdrop) {
                  backdrop.remove();
              }
          });

          // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google —É–∂–µ –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ auth.js
      }
  }

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ (–¥–µ—Å–∫—Ç–æ–ø –∏ –º–æ–±–∏–ª—å–Ω–∞—è)
  loginBtn.addEventListener("click", handleLoginClick);
  mobileLoginBtn.addEventListener("click", handleLoginClick);

  // ===================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =====================

  // ===================== –ë–õ–û–ö –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú/–ü–†–û–°–ú–û–¢–†–û–ú =====================
  // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const saveToCloudBtn = document.getElementById("saveToCloudBtn");
  const showResultsBtn = document.getElementById("showResultsBtn");

  // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const mobileSaveBtn = document.getElementById('mobile-save-btn');
  const mobileViewBtn = document.getElementById('mobile-view-btn');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async function saveResult() {
    try {
      await saveResultToFirestore(new Date().toLocaleString(), spheres);
      showModal('saveSuccessModal', 'savedToCloud');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      initializeHistorySlider();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∫–Ω–æ–ø–∫–∏ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª
  if (saveToCloudBtn) {
    saveToCloudBtn.addEventListener('click', () => {
      if (!auth.currentUser) {
        // –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        const loginModal = new bootstrap.Modal(loginModalEl);
        loginModal.show();
        return;
      }
      saveResult();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (save/view)
  mobileSaveBtn.addEventListener('click', () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    saveResult();
  });

  mobileViewBtn.addEventListener('click', () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    showResultsModal();
  });

  // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
  showResultsBtn.addEventListener("click", () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    showResultsModal();
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
  async function showResultsModal() {
    const resultsModalEl = document.getElementById("resultsModal");
    const resultsModal = new bootstrap.Modal(resultsModalEl, {
      backdrop: "static",
      keyboard: true
    });

    try {
      const entries = await loadResultsList();
      const resultsListEl = document.getElementById("resultsList");
      resultsListEl.innerHTML = "";

      if (entries.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        const noResultsDiv = document.createElement("div");
        noResultsDiv.classList.add("text-center", "py-4");

        const travoltaImg = document.createElement("img");
        travoltaImg.src = "img/travolta.gif";
        travoltaImg.alt = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤";
        travoltaImg.style.maxWidth = "200px";

        const noResultsText = document.createElement("p");
        noResultsText.classList.add("mt-3", "text-muted");
        noResultsText.textContent = (currentLanguage === "ru")
          ? "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
          : "No saved results yet";

        noResultsDiv.appendChild(travoltaImg);
        noResultsDiv.appendChild(noResultsText);
        resultsListEl.appendChild(noResultsDiv);

      } else {
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å, —Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫
        entries.forEach((entry) => {
          const row = document.createElement("div");
          row.classList.add("d-flex", "justify-content-between", "align-items-center", "mb-2");

          const titleSpan = document.createElement("span");
          titleSpan.style.flexGrow = "1";
          titleSpan.style.marginRight = "1rem";

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
          const dateStr = entry.createdAt?.seconds
            ? new Date(entry.createdAt.seconds * 1000).toLocaleString()
            : new Date().toLocaleString();
          titleSpan.textContent = dateStr;

          const buttonsContainer = document.createElement("div");
          buttonsContainer.classList.add("d-flex", "align-items-center");
          buttonsContainer.style.flexShrink = "0";

          const loadBtn = document.createElement("button");
          loadBtn.className = "btn btn-sm btn-primary me-2";
          loadBtn.textContent = "‚ñ∂Ô∏è";
          loadBtn.style.width = "40px";

          const delBtn = document.createElement("button");
          delBtn.className = "btn btn-sm btn-danger";
          delBtn.textContent = "‚ùå";
          delBtn.style.width = "40px";

          // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          loadBtn.addEventListener("click", async () => {
            const data = await loadSavedResult(entry.id);
            if (!data) {
              showModal("loadErrorModal", 'loaded');
              return;
            }
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Å–ª–∞–π–¥–µ—Ä–∞–º
            Object.keys(data).forEach(sphereId => {
              const sphereData = data[sphereId];
              Object.keys(sphereData).forEach(questionId => {
                const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
                if (slider) {
                  slider.value = sphereData[questionId];
                  updateSliderDisplay(sphereId, questionId, sphereData[questionId]);
                }
              });
              updateSphereAverage(sphereId);
            });
            updateOverallAverage();
            drawWheel();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–£—Å–ø–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–æ¬ª
            const modalInstance = bootstrap.Modal.getInstance(resultsModalEl);
            if (modalInstance) modalInstance.hide();
            showModal("loadSuccessModal", 'loaded');
          });

          // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          delBtn.addEventListener("click", () => {
            showConfirmDeleteModal(async () => {
              try {
                await deleteSavedResult(entry.id);
                const modalInstance = bootstrap.Modal.getInstance(resultsModalEl);
                if (modalInstance) {
                  modalInstance.hide();
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                showResultsModal();
                initializeHistorySlider();
                showModal("deleteSuccessModal", 'deleted');
              } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
                showModal("deleteErrorModal", 'deleteConfirm');
              }
            });
          });

          buttonsContainer.appendChild(loadBtn);
          buttonsContainer.appendChild(delBtn);
          row.appendChild(titleSpan);
          row.appendChild(buttonsContainer);
          resultsListEl.appendChild(row);
        });
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
      const resultsModalTitle = document.querySelector('#resultsModal .modal-title');
      if (resultsModalTitle) {
        resultsModalTitle.textContent = modalTranslations[currentLanguage].myResults;
      }

      resultsModal.show();

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
      showModal("loadErrorModal", 'loaded');
    }
  }
  // ==================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ü–†–û–°–ú–û–¢–†–ê ====================


  // ==================  –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –ö–ù–û–ü–û–ö –∏ USERINFO  ====================
  function updateLoginButtons() {
    if (auth.currentUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      loginBtn.innerText = (currentLanguage === 'ru') ? 'üë§ –í—ã–π—Ç–∏' : 'üë§ Logout';
      mobileLoginBtn.textContent = (currentLanguage === 'ru') ? 'üë§ –í—ã–π—Ç–∏' : 'üë§ Logout';
    } else {
      // –ù–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      loginBtn.innerText = (currentLanguage === 'ru') ? 'üë§ –í–æ–π—Ç–∏' : 'üë§ Login';
      mobileLoginBtn.textContent = (currentLanguage === 'ru') ? 'üë§ –í–æ–π—Ç–∏' : 'üë§ Login';
    }
  }

  function updateSaveButtons() {
    // –î–µ—Å–∫—Ç–æ–ø
    if (saveToCloudBtn) {
      saveToCloudBtn.innerText = buttonTexts[currentLanguage].save;
    }
    if (showResultsBtn) {
      showResultsBtn.innerText = buttonTexts[currentLanguage].view;
    }
    // –ú–æ–±–∏–ª—å–Ω—ã–µ
    if (mobileSaveBtn) {
      mobileSaveBtn.innerText = buttonTexts[currentLanguage].save;
    }
    if (mobileViewBtn) {
      mobileViewBtn.innerText = buttonTexts[currentLanguage].view;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏/email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–ø–∫–µ
  function updateUserInfo() {
    const user = auth.currentUser;
    if (user) {
      const displayName = user.displayName || user.email || "";
      userInfo.textContent = displayName;
      userInfoMobile.textContent = displayName;
    } else {
      userInfo.textContent = "";
      userInfoMobile.textContent = "";
    }
  }

  function updateUILanguage() {
    // –ö–Ω–æ–ø–∫–∏ ¬´Login/Logout¬ª + ¬´Save/View¬ª
    updateLoginButtons();
    updateSaveButtons();
    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserInfo();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    if (activeWheelSector) {
        highlightSector(activeWheelSector, true, true);
    }

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–º–æ–π –º–æ–¥–∞–ª–∫–∏ –ª–æ–≥–∏–Ω–∞
    const loginModalLabel = document.getElementById("loginModalLabel");
    const modalBodyText = document.querySelector("#loginModal .modal-body p");
    window.currentLanguage = currentLanguage; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ window.currentLanguage
    if (currentLanguage === "ru") {
      if (loginModalLabel) loginModalLabel.innerText = "–í—Ö–æ–¥";
      if (modalBodyText) modalBodyText.innerText = "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é:";
    } else {
      if (loginModalLabel) loginModalLabel.innerText = "Login";
      if (modalBodyText) modalBodyText.innerText = "Sign in with:";
    }
  }
  // ===========================================================================


  // ======================== onAuthStateChanged ================================
  auth.onAuthStateChanged((user) => {
    if (user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user);
      updateLoginButtons();
      updateSaveButtons();
      updateUserInfo();
      initializeHistorySlider(); // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
    } else {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      updateLoginButtons();
      updateSaveButtons();
    }
  });
  // ===========================================================================


  // ======================== –ë–õ–û–ö –° –ü–†–û–í–ï–†–ö–û–ô –°–û–°–¢–û–Ø–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ================================
  if (typeof document.addEventListener === 'function') {
    document.addEventListener('visibilitychange', async () => {
      if (document.visibilityState === 'visible') {
        try {
          console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É");
          const result = await getRedirectResult(auth);
          if (result) {
            const user = result.user;
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:", user);
            localStorage.setItem("uid", user.uid);
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            updateLoginButtons();
            updateSaveButtons();
            updateUserInfo();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const loginModalEl = document.getElementById("loginModal");
            if (loginModalEl) {
              const loginModal = bootstrap.Modal.getInstance(loginModalEl);
              if (loginModal) {
                loginModal.hide();
                document.body.classList.remove('modal-open');
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) backdrop.remove();
              }
            }
          } else {
            console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUser = auth.currentUser;
            if (currentUser) {
              console.log("–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", currentUser);
              localStorage.setItem("uid", currentUser.uid);
              updateLoginButtons();
              updateSaveButtons();
              updateUserInfo();
            }
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
        }
      }
    });
  }
  // ===========================================================================


  // ======================== –†–ê–ë–û–¢–ê –° –¢–ê–ë–ê–ú–ò/–ö–û–õ–ï–°–û–ú ==========================
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å—Ñ–µ—Ä (–∏ –∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
   */
  function renderTabs() {
    const savedValues = {};
    spheres.forEach((sphere) => {
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        if (slider) {
          savedValues[sphere.id] = savedValues[sphere.id] || {};
          savedValues[sphere.id][question.id] = slider.value;
        }
      });
    });

    const tabList = document.getElementById("sphereTabs");
    const tabContent = document.getElementById("sphereTabContent");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –±—ã–ª
    const activeTabId = document.querySelector("#sphereTabs .nav-link.active")?.id;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    tabList.innerHTML = "";
    tabContent.innerHTML = "";

    spheres.forEach((sphere) => {
      const li = document.createElement("li");
      li.className = "nav-item";

      const btn = document.createElement("button");
      btn.className = "nav-link sphere-tab-btn"; 
      btn.id = "tab-" + sphere.id;
      btn.type = "button";
      btn.setAttribute("data-color", sphere.color);
      btn.setAttribute("data-bs-toggle", "tab");
      btn.setAttribute("data-bs-target", "#pane-" + sphere.id);
      btn.role = "tab";

      let avg = (5.0).toFixed(1);
      if (savedValues[sphere.id]) {
        let sum = 0, count = 0;
        for (const key in savedValues[sphere.id]) {
          sum += parseInt(savedValues[sphere.id][key]);
          count++;
        }
        if (count) {
          avg = (sum / count).toFixed(1);
        }
      }
      const isMob = window.innerWidth < 576;
      if (isMob) {
        btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
      } else {
        btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
      }
      li.appendChild(btn);
      tabList.appendChild(li);

      const pane = document.createElement("div");
      pane.className = "tab-pane fade";
      pane.id = "pane-" + sphere.id;
      pane.role = "tabpanel";

      const header = document.createElement("h5");
      header.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
      header.className = "mb-3 mt-3";
      pane.appendChild(header);

      sphere.questions.forEach((question) => {
        const formGroup = document.createElement("div");
        formGroup.className = "mb-3";

        const label = document.createElement("label");
        label.className = "form-label sphere-header";
        label.setAttribute("for", `slider_${sphere.id}_${question.id}`);
        label.innerText = question.title[currentLanguage];
        formGroup.appendChild(label);

        const sliderWrapper = document.createElement("div");
        sliderWrapper.className = "slider-wrapper";

        const rangeContainer = document.createElement("div");
        rangeContainer.className = "range-container";

        const slider = document.createElement("input");
        slider.type = "range";
        slider.className = "form-range slider-control";
        slider.id = `slider_${sphere.id}_${question.id}`;
        slider.min = "0";
        slider.max = "10";
        slider.value = (savedValues[sphere.id] && savedValues[sphere.id][question.id]) || "5";
        slider.style.setProperty('--slider-thumb-color', sphere.color);

        slider.addEventListener("input", () => {
          updateSliderDisplay(sphere.id, question.id, slider.value);
          updateSphereAverage(sphere.id);
          drawWheel();
          // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
          if (activeWheelSector === sphere.id) {
            highlightSector(sphere.id, true, true);
          }
        });

        const desc = document.createElement("div");
        desc.id = `desc_${sphere.id}_${question.id}`;
        desc.className = "form-text slider-desc";
        const initVal = slider.value;
        desc.innerText = question.descriptions[initVal]
          ? question.descriptions[initVal][currentLanguage]
          : '';

        let val = parseInt(initVal, 10);
        let fraction = val / 10;
        let r = Math.round(255 * (1 - fraction));
        let g = Math.round(255 * fraction);
        desc.style.color = `rgb(${r}, ${g}, 0)`;

        rangeContainer.appendChild(slider);
        sliderWrapper.appendChild(rangeContainer);
        sliderWrapper.appendChild(desc);
        formGroup.appendChild(sliderWrapper);
        pane.appendChild(formGroup);
      });

      tabContent.appendChild(pane);
    });

    updateOverallAverage();

    // –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∫–∞–∫–∞—è-—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (activeTabId) {
      const newActiveTab = document.getElementById(activeTabId);
      if (newActiveTab) {
        newActiveTab.classList.add("active");
        const paneId = newActiveTab.getAttribute("data-bs-target");
        const activePane = document.querySelector(paneId);
        if (activePane) {
          activePane.classList.add("show", "active");
        }
      }
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
    const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
    tabLinks.forEach(tab => {
      tab.addEventListener('click', () => {
        const sphereId = tab.id.split('-')[1];
        highlightActiveSector(sphereId);
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ¬´–∫—Ä–∞—Å–∏–≤–æ—Å—Ç–∏¬ª
      tab.addEventListener("shown.bs.tab", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
        updateTabStyles();
      });
      tab.addEventListener("hidden.bs.tab", () => {
        updateTabStyles();
      });
      tab.addEventListener('mouseenter', () => {
        tab.style.boxShadow = `0 0 7px 2.5px ${tab.getAttribute("data-color")}`;
      });
      tab.addEventListener('mouseleave', () => {
        tab.style.boxShadow = 'none';
      });
    });

    updateTabStyles();
  }

  function updateTabStyles() {
    const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
    tabLinks.forEach(tab => {
      if (tab.classList.contains("active")) {
        tab.style.backgroundColor = tab.getAttribute("data-color");
        tab.style.color = "#333333";
      } else {
        tab.style.backgroundColor = "";
        tab.style.color = darkMode ? "#fff" : "#000";
      }
    });
  }

  function updateSliderDisplay(sphereId, questionId, value) {
    const sphere = spheres.find(s => s.id === sphereId);
    if (!sphere) return;
    const question = sphere.questions.find(q => q.id === questionId);
    if (!question) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const displayElement = document.getElementById(`value_${sphereId}_${questionId}`);
    if (displayElement) {
        displayElement.textContent = value;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –µ–≥–æ —Ü–≤–µ—Ç
    const descElem = document.getElementById(`desc_${sphereId}_${questionId}`);
    if (descElem) {
        const dict = question.descriptions[value];
        descElem.innerText = dict ? dict[currentLanguage] : "";

        let val = parseInt(value, 10);
        let fraction = val / 10;
        let r = Math.round(255 * (1 - fraction));
        let g = Math.round(255 * fraction);
        descElem.style.color = `rgb(${r}, ${g}, 0)`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–æ–ª–µ—Å–æ
    updateSphereAverage(sphereId);
    drawWheel();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
    if (activeWheelSector) {
        highlightSector(activeWheelSector, true, true);
    }
  }

  function updateSphereAverage(sphereId) {
    const sphere = spheres.find(s => s.id === sphereId);
    if (!sphere) return;
    let sum = 0, count = 0;
    sphere.questions.forEach(question => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      sum += parseInt(slider.value);
      count++;
    });

    const avg = (sum / (count || 1)).toFixed(1);
    const tabButton = document.getElementById("tab-" + sphereId);
    const isMobileView = window.innerWidth < 576;

    if (isMobileView) {
      tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
    } else {
      tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
    }

    const paneHeader = document.querySelector(`#pane-${sphereId} h5`);
    if (paneHeader) {
      paneHeader.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
    }
    updateOverallAverage();
  }

  function updateOverallAverage() {
    let total = 0, count = 0;
    spheres.forEach(sphere => {
      sphere.questions.forEach(question => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        total += parseInt(slider.value);
        count++;
      });
    });
    const overall = (total / (count || 1)).toFixed(1);
    document.getElementById("overallAverage").innerText =
      (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;
  }

  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é drawWheel –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.drawWheel = function(skipHighlight = false) {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    ctx.clearRect(0, 0, width, height);

    wheelSectors = [];

    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) / 2 - 30;
    const anglePerSphere = (2 * Math.PI) / spheres.length;
    let startAngle = -Math.PI / 2;
    

    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä—ã
    const currentActive = activeWheelSector;
    const currentHovered = hoveredSector;

    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const sectorsContainer = document.getElementById('sectorsContainer');
    if (!sectorsContainer) {
        console.error("Container for sectors not found!");
        return;
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    sectorsContainer.innerHTML = '';

    // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    for (let i = 1; i <= 10; i++) {
      const alpha = 1 - (i * 0.1);
      spheres.forEach((sphere) => {
        let sum = 0, count = 0;
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          sum += parseInt(slider.value);
          count++;
        });
        const avg = sum / (count || 1);
        const fraction = avg / 10;
        const sectorRadius = fraction * maxRadius * (i / 10);

        const endAngle = startAngle + anglePerSphere;
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, sectorRadius, startAngle, endAngle);
        ctx.closePath();
        ctx.fillStyle = sphere.color || "#CCC";
        ctx.globalAlpha = alpha;
        ctx.fill();
        ctx.stroke();

        startAngle = endAngle;
      });
      startAngle = -Math.PI / 2; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    }

    // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–≤–µ—Ä—Ö –≥—Ä–∞–¥–∞—Ü–∏–π
    spheres.forEach((sphere) => {
      let sum = 0, count = 0;
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        sum += parseInt(slider.value);
        count++;
      });
      const avg = sum / (count || 1);
      const fraction = avg / 10;
      const sectorRadius = fraction * maxRadius;

      const endAngle = startAngle + anglePerSphere;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, sectorRadius, startAngle, endAngle);
      ctx.closePath();
      ctx.fillStyle = sphere.color || "#CCC";
      ctx.globalAlpha = 1;
      ctx.fill();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–π
      ctx.strokeStyle = darkMode ? "rgba(255, 255, 255, 0.3)" : "rgba(0, 0, 0, 0.3)";
      ctx.lineWidth = 1;
      ctx.stroke();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è tooltip
      wheelSectors.push({
          sphereId: sphere.id,
          startAngle: startAngle,
          endAngle: endAngle,
          radius: sectorRadius,
          sphereObj: sphere
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
      const sectorElement = document.createElement('div');
      sectorElement.id = "sector-" + sphere.id;
      sectorElement.className = "sector";
      sectorsContainer.appendChild(sectorElement);

      // –ü–æ–¥–ø–∏—Å—å —É –∫—Ä–∞—è —Å–µ–∫—Ç–æ—Ä–∞
      const midAngle = startAngle + anglePerSphere / 2;
      const labelRadius = Math.min(width, height) / 2 - 80;
      const labelX = centerX + labelRadius * Math.cos(midAngle);
      const labelY = centerY + labelRadius * Math.sin(midAngle);
      
      ctx.save();
      ctx.font = "16px sans-serif";
      ctx.fillStyle = darkMode ? "#fff" : "#000";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(`${sphere.emoji || ""} ${sphere.title[currentLanguage]}`, labelX, labelY);
      ctx.restore();

      // –ß–∏—Å–ª–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
      const midAngleNum = startAngle + anglePerSphere / 2;
      const radiusNum = maxRadius * 0.5;
      const xNum = centerX + radiusNum * Math.cos(midAngleNum);
      const yNum = centerY + radiusNum * Math.sin(midAngleNum);

      ctx.save();
      ctx.font = "16px sans-serif";
      ctx.fillStyle = darkMode ? "#fff" : "#000";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(Math.round(avg), xNum, yNum);
      ctx.restore();

      startAngle = endAngle;
    });

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–µ–π
    drawGrid();
    drawLabels();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ (—Ä–æ–∑—ã –≤–µ—Ç—Ä–æ–≤)
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–µ–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–∫—Ç–æ—Ä–∞—Ö
  function drawSectorDivisions(sector) {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const maxRadius = Math.min(canvas.width, canvas.height) / 2 - 30;

    ctx.save();
    ctx.strokeStyle = darkMode ? "rgba(255, 255, 255, 0.4)" : "rgba(0, 0, 0, 0.4)";
    ctx.lineWidth = 1;

    // –†–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏—è –æ—Ç 0 –¥–æ 10
    for (let i = 1; i <= 10; i++) {
      const radius = (maxRadius * i) / 10;
      const startX = centerX + radius * Math.cos(sector.startAngle);
      const startY = centerY + radius * Math.sin(sector.startAngle);
      const endX = centerX + radius * Math.cos(sector.endAngle);
      const endY = centerY + radius * Math.sin(sector.endAngle);

      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.arc(centerX, centerY, radius, sector.startAngle, sector.endAngle);
      ctx.stroke();
    }

    ctx.restore();
  }

  function drawGrid() {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) / 2 - 30;

    ctx.save();
    ctx.globalAlpha = 0.5;
    ctx.strokeStyle = darkMode 
      ? "rgba(255, 255, 255, 0.6)"
      : "rgba(0, 0, 0, 0.6)";
    ctx.lineWidth = 1.5;

    // –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
    for (let i = 1; i <= 10; i++) {
      const radius = maxRadius * (i / 10);
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.stroke();
    }

    // –†–∞–¥–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    const numDirections = 16;
    for (let i = 0; i < numDirections; i++) {
      const angle = (i * Math.PI * 2) / numDirections;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.lineTo(
        centerX + maxRadius * Math.cos(angle),
        centerY + maxRadius * Math.sin(angle)
      );
      ctx.stroke();
    }

    ctx.restore();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
  function drawLabels() {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) / 2 - 30;
    const anglePerSphere = (2 * Math.PI) / spheres.length;
    let startAngle = -Math.PI / 2;

    spheres.forEach((sphere) => {
      // –ü–æ–¥–ø–∏—Å—å —É –∫—Ä–∞—è —Å–µ–∫—Ç–æ—Ä–∞
      const midAngle = startAngle + anglePerSphere / 2;
      const labelRadius = maxRadius - 50;
      const labelX = centerX + labelRadius * Math.cos(midAngle);
      const labelY = centerY + labelRadius * Math.sin(midAngle);
      
      ctx.save();
      ctx.font = "16px sans-serif";
      ctx.fillStyle = darkMode ? "#fff" : "#000";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(`${sphere.emoji || ""} ${sphere.title[currentLanguage]}`, labelX, labelY);
      ctx.restore();

      // –ß–∏—Å–ª–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      let sum = 0, count = 0;
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        sum += parseInt(slider.value);
        count++;
      });
      const avg = sum / (count || 1);

      const radiusNum = maxRadius * 0.5;
      const xNum = centerX + radiusNum * Math.cos(midAngle);
      const yNum = centerY + radiusNum * Math.sin(midAngle);

      ctx.save();
      ctx.font = "16px sans-serif";
      ctx.fillStyle = darkMode ? "#fff" : "#000";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(Math.round(avg), xNum, yNum);
      ctx.restore();

      startAngle += anglePerSphere;
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
  function drawSectorLabels(sector) {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) / 2 - 30;

    // –ü–æ–¥–ø–∏—Å—å —É –∫—Ä–∞—è —Å–µ–∫—Ç–æ—Ä–∞
    const midAngle = (sector.startAngle + sector.endAngle) / 2;
    const labelRadius = maxRadius - 50;
    const labelX = centerX + labelRadius * Math.cos(midAngle);
    const labelY = centerY + labelRadius * Math.sin(midAngle);
    
    ctx.save();
    ctx.font = "16px sans-serif";
    ctx.fillStyle = darkMode ? "#fff" : "#000";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(`${sector.sphereObj.emoji || ""} ${sector.sphereObj.title[currentLanguage]}`, labelX, labelY);

    // –ß–∏—Å–ª–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    let sum = 0, count = 0;
    sector.sphereObj.questions.forEach((question) => {
      const slider = document.getElementById(`slider_${sector.sphereObj.id}_${question.id}`);
      sum += parseInt(slider.value);
      count++;
    });
    const avg = sum / (count || 1);

    const radiusNum = maxRadius * 0.5;
    const xNum = centerX + radiusNum * Math.cos(midAngle);
    const yNum = centerY + radiusNum * Math.sin(midAngle);

    ctx.font = "16px sans-serif";
    ctx.fillStyle = darkMode ? "#fff" : "#000";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(Math.round(avg), xNum, yNum);
    ctx.restore();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–µ–∫—Ç–æ—Ä–∞
  let activeWheelSector = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
  let hoveredSector = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º

  function highlightSector(sphereId, isHighlighted, isActive = false) {
    const sector = wheelSectors.find(sector => sector.sphereId === sphereId);
    console.log(`Highlighting sector: ${sphereId}, isHighlighted: ${isHighlighted}, isActive: ${isActive}`);

    if (sector) {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
        if (!isActive) {
            drawWheel();
        }

        const canvas = document.getElementById("balanceWheel");
        const ctx = canvas.getContext("2d");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ctx.save();
        
        // –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ —è—Ä—á–µ
        if (isHighlighted || isActive) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
            ctx.shadowBlur = isActive ? 20 : 15;
            ctx.shadowColor = sector.sphereObj.color;
            
            // –î–µ–ª–∞–µ–º —Å–µ–∫—Ç–æ—Ä —è—Ä—á–µ
            ctx.globalAlpha = isActive ? 0.7 : 0.5;
            ctx.fillStyle = sector.sphereObj.color;
            ctx.beginPath();
            ctx.moveTo(canvas.width/2, canvas.height/2);
            ctx.arc(canvas.width/2, canvas.height/2, sector.radius, sector.startAngle, sector.endAngle);
            ctx.closePath();
            ctx.fill();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—É—é –æ–±–≤–æ–¥–∫—É
            ctx.strokeStyle = darkMode ? "#ffffff" : "#000000";
            ctx.lineWidth = isActive ? 3 : 2;
            ctx.globalAlpha = isActive ? 0.8 : 0.6;
            ctx.stroke();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–ª–µ–Ω–∏–π
            ctx.restore();
            ctx.save();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–ª–µ–Ω–∏–π
            ctx.globalAlpha = 1.0;
            ctx.lineWidth = isActive ? 2 : 1.5;
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
            drawSectorDivisions(sector);
            drawSectorLabels(sector);
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ctx.restore();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
        if (isActive) {
            // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            if (activeWheelSector && activeWheelSector !== sphereId) {
                const prevSector = wheelSectors.find(s => s.sphereId === activeWheelSector);
                if (prevSector) {
                    drawWheel();
                }
            }
            activeWheelSector = sphereId;
            hoveredSector = null;
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            const tab = document.getElementById(`tab-${sphereId}`);
            if (tab) {
                const tabEl = bootstrap.Tab.getOrCreateInstance(tab);
                tabEl.show();
            }
        } else if (isHighlighted) {
            hoveredSector = sphereId;
        }
    } else {
        console.error(`Sector not found for sphereId: ${sphereId}`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
  function highlightActiveSector(sphereId) {
    console.log(`Highlighting active sector: ${sphereId}`);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    activeWheelSector = sphereId;
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    highlightSector(sphereId, true, true);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–∫—Ç–æ—Ä
  const canvas = document.getElementById("balanceWheel");
  let highlightTimeout; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞

  canvas.addEventListener('mousemove', (e) => {
    const hoveredSector = getSectorUnderCursor(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
    if (hoveredSector) {
        console.log(`Mouse over sector: ${hoveredSector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        clearTimeout(highlightTimeout); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        // –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        if (hoveredSector.sphereId !== activeWheelSector) {
            highlightSector(hoveredSector.sphereId, true, false);
        }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ —Å canvas
  canvas.addEventListener('mouseleave', () => {
    clearTimeout(highlightTimeout);
    if (activeWheelSector) {
        highlightSector(activeWheelSector, false, true); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
    } else {
        drawWheel(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
    drawWheel(false); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ drawWheel()
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä
  canvas.addEventListener('click', (e) => {
    const hoveredSector = getSectorUnderCursor(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
    if (hoveredSector) {
        console.log(`Clicked on sector: ${hoveredSector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        const tabButton = document.getElementById("tab-" + hoveredSector.sphereId);
        if (tabButton) {
            tabButton.click(); // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            showTabContent(hoveredSector.sphereId); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        }
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ–≥–æ
        activeWheelSector = hoveredSector.sphereId;
        highlightSector(hoveredSector.sphereId, true, true);
    } else {
        console.log(`Clicked outside of sectors`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (activeWheelSector) {
            highlightSector(activeWheelSector, false, true); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
  function highlightActiveSector(sphereId) {
    console.log(`Highlighting active sector: ${sphereId}`);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    activeWheelSector = sphereId;
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    highlightSector(sphereId, true, true);
  }

  // –°–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  function initializeHistorySlider() {
    loadResultsList().then(entries => {
      if (entries.length < 2) {
        document.getElementById("historySliderContainer").classList.add("d-none");
        return;
      }
      const historySliderContainer = document.getElementById("historySliderContainer");
      historySliderContainer.classList.remove("d-none");

      entries.sort((a, b) => a.createdAt.seconds - b.createdAt.seconds);

      const historySlider = document.getElementById("historySlider");
      historySlider.min = "0";
      historySlider.max = entries.length - 1;
      historySlider.value = entries.length - 1;

      updateHistoryDateDisplay(historySlider.value, entries);
      updateCanvasFromHistory(entries, historySlider.value);

      historySlider.addEventListener("input", (e) => {
        const value = e.target.value;
        updateHistoryDateDisplay(value, entries);
        updateCanvasFromHistory(entries, value);
      });
    }).catch(error => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
      showModal("loadErrorModal", 'loaded');
    });
  }

  function updateHistoryDateDisplay(value, entries) {
    const entry = entries[value];
    const date = new Date(entry.createdAt.seconds * 1000);
    document.getElementById("historyDateDisplay").textContent = date.toLocaleString();
  }

  function updateCanvasFromHistory(entries, index) {
    const data = entries[index].data;
    Object.keys(data).forEach(sphereId => {
      const sphereData = data[sphereId];
      Object.keys(sphereData).forEach(questionId => {
        const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
        if (slider) {
          const value = sphereData[questionId];
          slider.value = value;
          updateSliderDisplay(sphereId, questionId, value);
        }
      });
      updateSphereAverage(sphereId);
    });
    drawWheel();
    if (activeWheelSector) {
      highlightActiveSector(activeWheelSector);
    }
  }
  // ===========================================================================

  // =================== –ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON/PDF ============================
  function initPdfFonts(doc) {
    doc.addFileToVFS("DejaVuSans.ttf", DejaVuSansTTF);
    doc.addFont("DejaVuSans.ttf", "DejaVuSans", "normal");
    doc.setFont("DejaVuSans", "normal");
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–≥–ª—É)
  function updateDateDisplay() {
    const now = new Date();
    const monthsEn = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ];
    const monthsRu = [
      "–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
      "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"
    ];
    const day = now.getDate();
    const monthIndex = now.getMonth();
    const year = now.getFullYear();

    if (currentLanguage === "ru") {
      const monthName = monthsRu[monthIndex];
      const dateString = `${day} ${monthName} ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    } else {
      const monthName = monthsEn[monthIndex];
      const dateString = `${monthName} ${day}, ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    }
  }

  // –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON¬ª (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
  document.getElementById("saveResults")?.addEventListener("click", () => {
    let results = {};
    results.date = new Date().toISOString();
    spheres.forEach((sphere) => {
      let sphereData = {};
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        sphereData[question.id] = parseInt(slider.value);
      });
      results[sphere.id] = sphereData;
    });
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(results, null, 2));
    const downloadAnchor = document.createElement("a");
    downloadAnchor.setAttribute("href", dataStr);
    downloadAnchor.setAttribute("download", "results.json");
    document.body.appendChild(downloadAnchor);
    downloadAnchor.click();
    downloadAnchor.remove();
  });

  // –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF¬ª
  document.getElementById("savePDF")?.addEventListener("click", async () => {
    await document.fonts.ready;
    const originalDarkMode = darkMode;
    darkMode = false;
    document.body.classList.remove("dark-mode");

    const canvas = document.getElementById("balanceWheel");
    canvas.width = 800;
    canvas.height = 800;

    drawWheel();

    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = "high";

    fillCanvasBackground(canvas, "#ffffff");

    setTimeout(() => {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({ unit: "px", format: "a4" });
      initPdfFonts(doc);

      const now = new Date();
      const day = now.getDate();
      const month = now.getMonth() + 1;
      const year = now.getFullYear();
      const dateString = `${day}.${month}.${year}`;

      const canvasData = canvas.toDataURL("image/png");

      let yPos = 20;
      const margin = 20;
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.getWidth();
      const maxTextWidth = pageWidth - margin * 2;

      doc.setFontSize(12);
      doc.text(`Mentorist Balance Wheel (${dateString})`, margin, yPos);
      yPos += 20;

      const imageWidth = 200;
      const xPos = (pageWidth - imageWidth) / 2;
      doc.addImage(canvasData, "PNG", xPos, yPos, imageWidth, 200);
      yPos += 220;
      doc.setFontSize(10);

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ñ–µ—Ä—ã, –≤—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
      spheres.forEach((sphere) => {
        let sum = 0, count = 0;
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          sum += parseInt(slider.value);
          count++;
        });
        const avg = (sum / (count || 1)).toFixed(1);
        const sphereLine = `${sphere.title[currentLanguage]} ${avg}`;
        let sphereLines = doc.splitTextToSize(sphereLine, maxTextWidth);

        sphereLines.forEach((line) => {
          if (yPos > pageHeight - margin) {
            doc.addPage();
            yPos = margin;
          }
          doc.text(line, margin, yPos);
          yPos += 15;
        });

        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          const value = slider.value;
          const answer = question.descriptions[value]
            ? question.descriptions[value][currentLanguage]
            : "";
          const questionLine = `${question.title[currentLanguage]}: ${answer}`;

          let questionLines = doc.splitTextToSize(questionLine, maxTextWidth);
          questionLines.forEach((line) => {
            if (yPos > pageHeight - margin) {
              doc.addPage();
              yPos = margin;
            }
            doc.text(line, margin + 10, yPos);
            yPos += 15;
          });
        });
        yPos += 10;
      });

      // –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
      let total = 0, globalCount = 0;
      spheres.forEach((sphere) => {
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          total += parseInt(slider.value);
          globalCount++;
        });
      });
      const overall = (total / (globalCount || 1)).toFixed(1);
      const overallText = (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;

      let overallLines = doc.splitTextToSize(overallText, maxTextWidth);
      overallLines.forEach((line) => {
        if (yPos > pageHeight - margin) {
          doc.addPage();
          yPos = margin;
        }
        doc.text(line, margin, yPos);
        yPos += 15;
      });

      doc.save("results.pdf");
    }, 200);

    setTimeout(() => {
      darkMode = originalDarkMode;
      if (darkMode) {
        document.body.classList.add("dark-mode");
      } else {
        document.body.classList.remove("dark-mode");
      }
      drawWheel();
    }, 600);
  });
  // ====================== –ö–æ–Ω–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON/PDF ==========================

  // ================== –ë–õ–û–ö –° –¢–ê–ë–ê–ú–ò ==================
  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function setupButtons() {
    const isMobile = window.innerWidth < 576;
    const themeBtn = isMobile ? document.getElementById("themeToggle") : document.getElementById("themeToggleDesktop");
    const langBtn = isMobile ? document.getElementById("langToggle") : document.getElementById("langToggleDesktop");
    const faqContent = document.getElementById("faqContent");
    const sphereTabContent = document.getElementById("sphereTabContent");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (themeBtn) {
      themeBtn.innerText = darkMode
        ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
        : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
    }
    
    if (langBtn) {
      langBtn.innerText = (currentLanguage === "ru") ? "üåê RU" : "üåê EN";
    }

    // **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ**, –∞ —Å—Ñ–µ—Ä—ã —Å–∫—Ä—ã–≤–∞–µ–º
    if (faqContent) {
      faqContent.style.display = "block";
      faqContent.innerHTML = faqInstructions[currentLanguage];
    }
    if (sphereTabContent) {
      sphereTabContent.style.display = "none";
    }

    if (!themeBtn || !langBtn) return;

    themeBtn.addEventListener("click", () => {
      darkMode = !darkMode;
      document.body.classList.toggle("dark-mode", darkMode);
      themeBtn.innerText = darkMode
        ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
        : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
      updateUILanguage();
      updateTabStyles();
      drawWheel();
      if (activeWheelSector) {
        highlightSector(activeWheelSector, true, true);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –≤ localStorage
      saveSettingsToLocalStorage(currentLanguage, darkMode);
    });

    // FAQ-–∫–Ω–æ–ø–∫–∏ (–¥–µ—Å–∫—Ç–æ–ø + –º–æ–±–∏–ª—å–Ω–∞—è)
    const faqBtnDesktop = document.getElementById("faqBtnDesktop");
    const faqBtnMobile = document.getElementById("faqBtnMobile");
    const sphereTabs = document.getElementById("sphereTabs");

    // –ú–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤ —Å—Ñ–µ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ç—É–ª—Ç–∏–ø–∞
    const sphereColors = [
      '#f6b95a', // –∂–µ–ª—Ç—ã–π (calling)
      '#fbd462', // –±–æ–ª–µ–µ —è—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π (finance)
      '#d25342', // –∫—Ä–∞—Å–Ω—ã–π (health)
      '#f05f50', // –±–æ–ª–µ–µ —è—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π (relationships)
      '#27a2df', // –±–æ–ª–µ–µ —è—Ä–∫–∏–π —Å–∏–Ω–∏–π (growth)
      '#2289bc', // —Å–∏–Ω–∏–π (recreation)
      '#45c4a1', // –±–æ–ª–µ–µ —è—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π (environment)
      '#3fa49a'  // –∑–µ–ª–µ–Ω—ã–π (contribution)
    ];

    // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ–º —Ñ–æ–Ω–∞
    function highlightElement(element, tooltipText = null, scrollToElement = false, borderRadius = null) {
  if (!element) {
    console.error('Element not found for highlighting');
    return;
  }
  
  console.log('Highlighting element:', element);
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–≤–µ—Ä–ª–µ–∏ –∏ —Ç—É–ª—Ç–∏–ø—ã
  const cleanup = () => {
    const existingOverlays = document.querySelectorAll('[id^="faqOverlay"]');
    const existingTooltips = document.querySelectorAll('[id^="faqTooltip"]');
    
    existingOverlays.forEach(overlay => overlay.remove());
    existingTooltips.forEach(tooltip => tooltip.remove());

    document.querySelectorAll('.pulsing').forEach(el => {
      el.classList.remove('pulsing');
      el.style.position = '';
      el.style.zIndex = '';
    });
  };

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  cleanup();

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
  const originalStyles = {
    position: window.getComputedStyle(element).position,
    zIndex: window.getComputedStyle(element).zIndex || 'auto'
  };

  // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
  const overlay = document.createElement('div');
  overlay.id = 'faqOverlay-' + Date.now();
  overlay.style.position = 'fixed';
  overlay.style.top = '0';
  overlay.style.left = '0';
  overlay.style.width = '100%';
  overlay.style.height = '100%';
  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
  overlay.style.zIndex = '1000';
  document.body.appendChild(overlay);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  element.style.position = originalStyles.position === 'static' ? 'relative' : originalStyles.position;
  element.style.zIndex = '1001';
  element.classList.add('pulsing');

  if (borderRadius) {
    element.style.borderRadius = borderRadius;
  }

  // –°–æ–∑–¥–∞–µ–º —Ç—É–ª—Ç–∏–ø
  if (tooltipText) {
    const tooltip = document.createElement('div');
    tooltip.id = 'faqTooltip-' + Date.now();
    tooltip.textContent = tooltipText;

    const randomColor = sphereColors[Math.floor(Math.random() * sphereColors.length)];
    tooltip.style.cssText = `
      background-color: ${randomColor};
      color: ${document.body.classList.contains('dark-mode') ? '#fff' : '#333'};
      padding: 8px 12px;
      border-radius: 4px;
      position: absolute;
      z-index: 1002;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      pointer-events: none;
      white-space: nowrap;
    `;

    document.body.appendChild(tooltip);

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø
    const elementRect = element.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();
    
    tooltip.style.top = `${elementRect.bottom + window.scrollY + 10}px`;
    tooltip.style.left = `${elementRect.left + (elementRect.width - tooltipRect.width) / 2}px`;
  }

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
  if (scrollToElement && window.innerWidth <= 576) {
    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ timeout
  setTimeout(() => {
    cleanup();
    element.style.position = originalStyles.position;
    element.style.zIndex = originalStyles.zIndex;
  }, 2000);
}

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ FAQ
    document.addEventListener('click', (e) => {
      if (!e.target.classList.contains('btn-like')) return;
      
      const tooltipText = currentLanguage === 'ru' ? '—è –∑–¥–µ—Å—å' : 'I am here';
      let targetElement = null;
      
      if (e.target.classList.contains('faq-health-button')) {
        targetElement = document.getElementById('sphereTabs');
      } else if (e.target.classList.contains('faq-timer-button')) {
        targetElement = document.getElementById('timer-button');
      }
      
      if (targetElement) {
        highlightElement(targetElement, tooltipText, true);
      }
    });

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å—Ñ–µ—Ä—ã
    function handleFaqClick() {
      console.log('FAQ click handler started');
      if (!faqContent || !sphereTabContent) {
        console.error('Required elements not found:', { faqContent: !!faqContent, sphereTabContent: !!sphereTabContent });
        return;
      }
      
      console.log('Toggling content visibility');
      faqContent.style.display = "block";
      sphereTabContent.style.display = "none";
      
      console.log('Highlighting FAQ content with tooltip');
      highlightElement(faqContent, currentLanguage === 'ru' ? '—è –∑–¥–µ—Å—å' : 'I am here', false, '10px');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
      if (activeWheelSector) {
        console.log('Resetting active wheel sector');
        activeWheelSector = null;
        drawWheel();
      }

      // –°–Ω–∏–º–∞–µ–º "active" —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
      const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
      tabLinks.forEach(tab => tab.classList.remove("active"));
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å—Ñ–µ—Ä
    if (sphereTabs) {
      sphereTabs.addEventListener('click', (e) => {
        const target = e.target.closest('.nav-link');
        if (!target) return;

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (faqContent) {
          faqContent.style.display = "none";
        }
        if (sphereTabContent) {
          sphereTabContent.style.display = "block";
        }

        // –°–Ω–∏–º–∞–µ–º "active" —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
        tabLinks.forEach(tab => tab.classList.remove("active"));
        target.classList.add("active");

        if (window.innerWidth <= 576) {
          window.scrollTo({ top: 0, behavior: "smooth" });
        }
      });
    }

    if (faqBtnDesktop) faqBtnDesktop.addEventListener("click", handleFaqClick);
    if (faqBtnMobile) faqBtnMobile.addEventListener("click", handleFaqClick);

    // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    langBtn.addEventListener("click", () => {
      const faqIsOpen = (faqContent && faqContent.style.display !== "none");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
      const savedValues = {};
      spheres.forEach(sphere => {
        sphere.questions.forEach(question => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          if (slider) {
            savedValues[sphere.id] = savedValues[sphere.id] || {};
            savedValues[sphere.id][question.id] = slider.value;
          }
        });
      });

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫
      currentLanguage = (currentLanguage === "ru") ? "en" : "ru";
      
      // –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è timer.js
      document.dispatchEvent(new CustomEvent('languageChanged', {
        detail: { language: currentLanguage }
      }));

      langBtn.innerText = (currentLanguage === "ru") ? "üåê RU" : "üåê EN";
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –≤ localStorage
      saveSettingsToLocalStorage(currentLanguage, darkMode);
      themeBtn.innerText = darkMode
        ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
        : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
      
      if (activeWheelSector) {
        highlightSector(activeWheelSector, true, true);
      }

      const savePdfBtn = document.getElementById("savePDF");
      if (savePdfBtn) {
        // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, PDF-–∫–Ω–æ–ø–∫–∞ –≤–µ–∑–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è, –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω—è—Ç—å
        savePdfBtn.innerText = (currentLanguage === "ru") ? "üîΩ PDF" : "üîΩ PDF";
      }

      updateDateDisplay();
      updateUILanguage();

      renderTabs();
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∑—É–Ω–∫–∏
      spheres.forEach(sphere => {
        if (savedValues[sphere.id]) {
          sphere.questions.forEach(question => {
            const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
            if (slider) {
              slider.value = savedValues[sphere.id][question.id] || 5;
              updateSliderDisplay(sphere.id, question.id, slider.value);
            }
          });
          updateSphereAverage(sphere.id);
        }
      });
      updateTabStyles();
      drawWheel();
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–ª–µ—Å–∞
      if (activeWheelSector) {
        highlightSector(activeWheelSector, true, true);
      }

      // –ï—Å–ª–∏ –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ FAQ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç ‚Äî –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–º
      if (faqIsOpen) {
        if (faqContent) {
          faqContent.innerHTML = faqInstructions[currentLanguage];
          faqContent.style.display = "block";
        }
        if (sphereTabContent) {
          sphereTabContent.style.display = "none";
        }
      } else {
        // –ï—Å–ª–∏ –∂–µ FAQ –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –Ω–∞–æ–±–æ—Ä–æ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º FAQ
        if (faqContent) {
          faqContent.style.display = "none";
        }
        if (sphereTabContent) {
          sphereTabContent.style.display = "block";
        }
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  function init() {
    renderTabs();
    updateDateDisplay();
    drawWheel();
    setupButtons();
    initializeHistorySlider(); // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  init();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
  initFloatingTooltip();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  window.currentLanguage = currentLanguage;

  // –ï—Å–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –ª–∏—Å—Ç–∞–µ–º –≤–Ω–∏–∑ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏, –≤–≤–µ—Ä—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  let lastScrollTop = 0;
  window.addEventListener("scroll", function() {
    if (window.innerWidth >= 576) return;
    let st = window.pageYOffset || document.documentElement.scrollTop;
    if (st > lastScrollTop) {
      document.getElementById("sphereTabs").style.transform = "translateY(-200%)";
    } else {
      document.getElementById("sphereTabs").style.transform = "translateY(0)";
    }
    lastScrollTop = st <= 0 ? 0 : st;
  }, false);

  // 3D-—ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–æ–ª–µ—Å–æ
  const canvasWrapper = document.getElementById('canvas-wrapper');
  const wheelContainer = document.getElementById('balanceWheelContainer');
  const glow = wheelContainer.querySelector('.glow');
  let bounds;

  /**
   * Tooltip ‚Äî –ù–ï —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π 3D-–ø–æ–≤–æ—Ä–æ—Ç,
   * –∞ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏–º –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ ¬´–Ω–µ–ø–æ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ¬ª –∫–∞–Ω–≤–∞—Å–∞.
   */
  function showSphereTooltip(e) {
    const canvas = document.getElementById("balanceWheel");
    const tooltip = document.getElementById("canvasTooltip");
    canvas.style.cursor = 'pointer';
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ wheelContainer
    const wheelRect = wheelContainer.getBoundingClientRect();
    const canvasRect = canvas.getBoundingClientRect();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ wheelContainer, –∞ –Ω–µ canvas
    const xInCanvas = e.clientX - wheelRect.left;
    const yInCanvas = e.clientY - wheelRect.top;

    const hoveredSector = getSectorUnderCursor(xInCanvas, yInCanvas);
    if (!hoveredSector) {
      tooltip.style.display = 'none';
      canvas.style.cursor = 'default';
      return;
    }
    const sphere = hoveredSector.sphereObj;
    const sphereTitle = sphere.title[currentLanguage] || sphere.title["en"];

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    let questionsHtml = '';
    sphere.questions.forEach(question => {
      const sliderId = `slider_${sphere.id}_${question.id}`;
      const sliderEl = document.getElementById(sliderId);
      if (!sliderEl) return;
      const val = sliderEl.value;
      const desc = question.descriptions[val]
        ? question.descriptions[val][currentLanguage]
        : '';
      questionsHtml += `<div style="margin-bottom:2px;">
        <strong>${question.title[currentLanguage]}:</strong> ${desc}
      </div>`;
    });
    const tooltipHtml = `
      <div style="font-weight:600; margin-bottom:6px;">${sphereTitle}</div>
      ${questionsHtml}
    `;
    tooltip.innerHTML = tooltipHtml;
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç—É–ª—Ç–∏–ø–∞
    const tooltipRect = tooltip.getBoundingClientRect();
    const tooltipHeight = tooltipRect.height;
    const tooltipWidth = tooltipRect.width;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    const bottomSpace = window.innerHeight - e.clientY;
    const rightSpace = window.innerWidth - e.clientX;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø
    let tooltipLeft = e.pageX + 15;
    let tooltipTop = e.pageY + 15;

    // –ï—Å–ª–∏ —Ç—É–ª—Ç–∏–ø –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
    if (rightSpace < tooltipWidth + 15) {
      tooltipLeft = e.pageX - tooltipWidth - 15;
    }

    // –ï—Å–ª–∏ —Ç—É–ª—Ç–∏–ø –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
    if (bottomSpace < tooltipHeight + 15) {
      tooltipTop = e.pageY - tooltipHeight - 15;
    }

    tooltip.style.left = tooltipLeft + 'px';
    tooltip.style.top = tooltipTop + 'px';
    tooltip.style.display = 'block';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ —É–≥–æ–ª –º—ã—à–∏ –≤ —Å–µ–∫—Ç–æ—Ä
  function isAngleInArc(angle, start, end) {
    if (start <= end) {
        return angle >= start && angle <= end;
    } else {
        // –ï—Å–ª–∏ –¥—É–≥–∞ "–ø–µ—Ä–µ–≤–∞–ª–∏–≤–∞–µ—Ç" —á–µ—Ä–µ–∑ 2œÄ
        return (angle >= start && angle < 2 * Math.PI) || (angle >= 0 && angle <= end);
    }
  }

  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥—É–ª—è floating-tooltip.js
window.getSectorUnderCursor = function(mouseX, mouseY) {
    const canvas = document.getElementById("balanceWheel");
    const canvasRect = canvas.getBoundingClientRect();
    const centerX = canvasRect.width / 2;
    const centerY = canvasRect.height / 2;
    const dx = mouseX - centerX;
    const dy = mouseY - centerY;
    const r = Math.sqrt(dx * dx + dy * dy);

    let angle = Math.atan2(dy, dx);
    if (angle < 0) {
        angle += 2 * Math.PI;
    }

    console.log(`Mouse Position: (${mouseX}, ${mouseY}), Angle: ${angle}, Radius: ${r}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    for (let sector of wheelSectors) {
        let startAngle = sector.startAngle;
        let endAngle = sector.endAngle;
        if (startAngle < 0) startAngle += 2 * Math.PI;
        if (endAngle < 0) endAngle += 2 * Math.PI;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —É–≥–æ–ª –≤ —Å–µ–∫—Ç–æ—Ä
        if (isAngleInArc(angle, startAngle, endAngle)) {
            // –ò –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–¥–∏—É—Å
            if (r <= sector.radius) {
                console.log(`Sector found: ${sector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                highlightSector(sector.sphereId, true);
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
                canvas.addEventListener('mouseleave', () => {
                    highlightSector(sector.sphereId, false);
                }, { once: true });
                return sector;
            }
        }
    }
    return null;
}

  /**
   * 3D-–ø–æ–≤–æ—Ä–æ—Ç –∫–æ–ª–µ—Å–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è tooltip,
   * –Ω–æ —Å–∞–º—É –∞–Ω–∏–º–∞—Ü–∏—é/–Ω–∞–∫–ª–æ–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º.
   */
  function rotateCanvas(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è deviceorientation –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (e.type === 'deviceorientation') {
      const alpha = e.alpha; // –ö–æ–º–ø–∞—Å: 0-360
      const beta = e.beta;   // –ù–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥: -180-180
      const gamma = e.gamma; // –ù–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ: -90-90

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –≤ –ø–æ–≤–æ—Ä–æ—Ç canvas
      const dx = gamma * 10;
      const dy = beta * 10;
      const distance = Math.sqrt(dx * dx + dy * dy);

      wheelContainer.style.transform = `
        scale3d(1.07, 1.07, 1.07)
        rotate3d(
          ${dy / 100},
          ${-dx / 100},
          0,
          ${Math.log(distance) * 2}deg
        )
      `;
      return;
    }

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ wheelContainer
    const rect = wheelContainer.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    const dx = e.clientX - centerX;
    const dy = e.clientY - centerY;
    const distance = Math.sqrt(dx * dx + dy * dy);

    // –ü–æ–≤–æ—Ä–æ—Ç
    wheelContainer.style.transform = `
      scale3d(1.07, 1.07, 1.07)
      rotate3d(
        ${dy / 100},
        ${-dx / 100},
        0,
        ${Math.log(distance) * 2}deg
      )
    `;
    // –ë–ª–∏–∫
    const leftX = e.clientX - rect.left;
    const topY = e.clientY - rect.top;
    glow.style.backgroundImage = `
      radial-gradient(
        circle at
        ${leftX}px ${topY}px,
        rgba(255, 255, 255, 0.2),
        transparent 70%
      )
    `;
    // Tooltip (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π 3D-–ø–æ–≤–æ—Ä–æ—Ç)
    showSphereTooltip(e);
  }

  canvasWrapper.addEventListener('mouseenter', () => {
    bounds = wheelContainer.getBoundingClientRect();
    document.addEventListener('mousemove', rotateCanvas);
  });

  canvasWrapper.addEventListener('mouseleave', () => {
    document.removeEventListener('mousemove', rotateCanvas);
    wheelContainer.style.transform = 'scale3d(1, 1, 1) rotate3d(0, 0, 0, 0deg)';
    glow.style.backgroundImage = 'none';
    const tooltip = document.getElementById('canvasTooltip');
    if (tooltip) {
      tooltip.style.display = 'none';
    }
    drawWheel(false); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ drawWheel()
    if (activeWheelSector) {
        highlightSector(activeWheelSector, false, true); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
    }
  });

  window.addEventListener('deviceorientation', function(event) {
    const alpha = event.alpha; // Rotation around z-axis
    const beta = event.beta; // Rotation around x-axis
    const gamma = event.gamma; // Rotation around y-axis

    // Calculate rotation based on device orientation
    const rotateX = beta / 90; // Normalize to [-1, 1]
    const rotateY = gamma / 90; // Normalize to [-1, 1]

    // Apply rotation to the canvas
    wheelContainer.style.transform = `
      scale3d(1.07, 1.07, 1.07)
      rotate3d(
        ${rotateX},
        ${-rotateY},
        0,
        ${Math.log(Math.abs(rotateX) + Math.abs(rotateY) + 1) * 2}deg
      )
    `;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const rect = wheelContainer.getBoundingClientRect();
    
    // Adjust glow effect based on orientation
    const leftX = (rotateY + 1) * rect.width / 2;
    const topY = (rotateX + 1) * rect.height / 2;
    glow.style.backgroundImage = `
      radial-gradient(
        circle at
        ${leftX}px ${topY}px,
        rgba(255, 255, 255, 0.2),
        transparent 70%
      )
    `;
  });

  showEmojiExplosion();
});
// –ö–æ–Ω–µ—Ü DOMContentLoaded
