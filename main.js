// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ FAQ
const faqInstructions = {
  ru: `<strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mentorist Life Balance Wheel!</strong><br><br>
  –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∂–∏–∑–Ω–∏ –ø–æ 8 –∫–ª—é—á–µ–≤—ã–º —Å—Ñ–µ—Ä–∞–º: –ó–¥–æ—Ä–æ–≤—å–µ, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –û–∫—Ä—É–∂–µ–Ω–∏–µ, –ü—Ä–∏–∑–≤–∞–Ω–∏–µ, –§–∏–Ω–∞–Ω—Å—ã, –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –∏ –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å.<br><br>
  <strong>1. –¢–µ–º–∞ –∏ —è–∑—ã–∫:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞ <span class="btn-like">üåê RU</span> –∏ <span class="btn-like">üåô –¢—ë–º–Ω–∞—è</span> / <span class="btn-like">üåû –°–≤–µ—Ç–ª–∞—è</span>.<br><br>
  <strong>2. FAQ:</strong> –ù–∞–∂–º–∏—Ç–µ <span class="btn-like">üí° FAQ</span> –¥–ª—è —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏; –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ñ–µ—Ä–∞–º ‚Äì –Ω–∞–∂–º–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É —Å—Ñ–µ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä <span class="btn-like">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ (5.0)</span>.<br><br>
  <strong>3. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:</strong> –í–∫–ª–∞–¥–∫–∏ –≤–≤–µ—Ä—Ö—É –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ñ–µ—Ä–∞–º–∏ –∂–∏–∑–Ω–∏.<br><br>
  <strong>4. –û—Ü–µ–Ω–∫–∞:</strong> –í –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ –µ—Å—Ç—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç 0 –¥–æ 10.<br><br>
  <strong>5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏.<br><br>
  <strong>6. –°—Ä–µ–¥–Ω–µ–µ:</strong> –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏ –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.<br><br>
  <strong>7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ <span class="btn-like">üë§ Login</span>, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <span class="btn-like">üíæ</span> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ –∏–ª–∏ <span class="btn-like">‚òÅÔ∏è</span> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ö–Ω–æ–ø–∫–∞ <span class="btn-like">üîΩ PDF</span> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.<br><br>
  <strong>8. –ò—Å—Ç–æ—Ä–∏—è:</strong> –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–ª–∞–π–¥–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∫–æ–ª–µ—Å–æ–º –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∫–æ–ª–µ—Å–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.`,
    
  en: `<strong>Welcome to Mentorist Life Balance Wheel!</strong><br><br>
  This is a tool for assessing life balance across 8 key areas: Health, Relationships, Environment, Calling, Finance, Self-Improvement, Life Brightness, and Spirituality.<br><br>
  <strong>1. Theme and Language:</strong> Use the buttons to switch theme and language <span class="btn-like">üåê EN</span> and <span class="btn-like">üåô Dark</span> / <span class="btn-like">üåû Light</span>.<br><br>
  <strong>2. FAQ:</strong> Click <span class="btn-like">üí° FAQ</span> for this instruction; to return to spheres - click the sphere tab, e.g., <span class="btn-like">‚ù§Ô∏è Health (5.0)</span>.<br><br>
  <strong>3. Switching:</strong> Tabs at the top allow you to switch between life areas.<br><br>
  <strong>4. Assessment:</strong> Each area has 5 questions. Use sliders to rate from 0 to 10.<br><br>
  <strong>5. Visualization:</strong> The balance wheel visually displays your ratings.<br><br>
  <strong>6. Average:</strong> Average values for each area and overall are calculated automatically.<br><br>
  <strong>7. Saving:</strong> To save results, click <span class="btn-like">üë§ Login</span> to log in. Then use the <span class="btn-like">üíæ</span> button to save to the cloud or <span class="btn-like">‚òÅÔ∏è</span> to view saved results. The <span class="btn-like">üîΩ PDF</span> button allows you to download results as PDF.<br><br>
  <strong>8. History:</strong> After logging in, you can use the history slider to view previous results. The slider is located below the balance wheel and allows you to navigate between saved dates. When you select a date, the wheel updates with ratings from that date.`
};

// –ò–º–ø–æ—Ä—Ç auth –∏–∑ firebase-init.js
import { auth } from "./firebase-init.js";
import { DejaVuSansTTF } from './fonts.js';
import { spheres } from './js/spheres.js';

// –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ firebase/auth
import {
  GoogleAuthProvider,
  signInWithPopup,
  signOut,
  onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";

import {
  saveResultToFirestore,
  loadResultsList,
  loadSavedResult,
  deleteSavedResult
} from "./firestore-utils.js";

document.addEventListener("DOMContentLoaded", () => {
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤–æ—Ä–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (window.DeviceOrientationEvent) {
    window.addEventListener('deviceorientation', rotateCanvas);
  }
  
  // –£–¥–∞–ª—è–µ–º "–∑–∞–≥—Ä—É–∑—á–∏–∫"
  const loader = document.getElementById("loader");
  if (loader) {
    loader.remove();
  }

  function initLoadingAnimation() {
    const colMd7 = document.querySelector('.col-md-7');
    const canvasWrapper = document.getElementById('canvas-wrapper');
    const faqContent = document.getElementById('faqContent');
    
    colMd7.classList.add('loading');
    canvasWrapper.classList.add('loading');
    faqContent.classList.add('loading');
    
    setTimeout(() => {
      colMd7.classList.remove('loading');
      canvasWrapper.classList.remove('loading');
      faqContent.classList.remove('loading');
    }, 50);
  }
  initLoadingAnimation();

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  let isMobile = window.innerWidth < 576;
  window.addEventListener("resize", () => {
    isMobile = window.innerWidth < 576;
  });

  function fillCanvasBackground(canvas, color) {
    const ctx = canvas.getContext("2d");
    ctx.save();
    ctx.globalCompositeOperation = "destination-over";
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
  }

  /***************************************************
   * 1. –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ: –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê + –ê–ù–ì–õ–ò–ô–°–ö–ò–ô
   ***************************************************/
  let currentLanguage = "en"; 
  let darkMode = true;       
  let wheelSectors = []; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤ –∫–æ–ª–µ—Å–∞

  // –û–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞, –∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  const buttonTexts = {
    ru: {
      save: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      login: 'üë§ –í–æ–π—Ç–∏',
      logout: 'üë§ –í—ã–π—Ç–∏',
      view: '‚òÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
    },
    en: {
      save: 'üíæ Save',
      login: 'üë§ Login',
      logout: 'üë§ Logout',
      view: '‚òÅÔ∏è Results'
    }
  };

  // ================== –ë–õ–û–ö –° –ú–û–î–ê–õ–¨–ù–´–ú –û–ö–ù–ê–ú–ò ==================
  const modalTranslations = {
    ru: {
      savedToCloud: "–£—Å–ø–µ—Ö",
      savedToCloudContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
      loaded: "–£—Å–ø–µ—Ö",
      loadedContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω",
      deleteConfirm: "–í–Ω–∏–º–∞–Ω–∏–µ",
      deleteConfirmContent: "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
      deleted: "–£—Å–ø–µ—Ö",
      deletedContent: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω",
      loginRequired: "–í—Ö–æ–¥",
      loginRequiredContent: "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!",
      myResults: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
      success: "–£—Å–ø–µ—Ö",
      delete: "–£–¥–∞–ª–∏—Ç—å",
      noResults: "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      load: "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
      cancel: "–û—Ç–º–µ–Ω–∞"
    },
    en: {
      savedToCloud: "Success",
      savedToCloudContent: "Result saved",
      loaded: "Success",
      loadedContent: "Result loaded",
      deleteConfirm: "Warning",
      deleteConfirmContent: "Delete result?",
      deleted: "Success",
      deletedContent: "Result deleted",
      loginRequired: "Login",
      loginRequiredContent: "Please log in first!",
      myResults: "Results",
      success: "Success",
      delete: "Delete",
      noResults: "No results",
      load: "Load",
      cancel: "Cancel"
    }
  };

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ID.  
   * messageKey ‚Äî –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'loginRequired'),
   * —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å –∏–∑ modalTranslations.
   */
  function showModal(modalId, messageKey = null) {
    const modal = document.getElementById(modalId);
    if (modal && messageKey) {
      const modalTitle = modal.querySelector('.modal-title');
      const modalBody = modal.querySelector('.modal-body');
      const translations = modalTranslations[currentLanguage];
      if (modalTitle) {
        modalTitle.textContent = translations[messageKey] || translations.success;
      }
      if (modalBody) {
        modalBody.textContent = translations[`${messageKey}Content`] || translations.success;
      }
    }
    if (modal) {
      new bootstrap.Modal(modal).show();
    }
  }

  /**
   * –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  function showConfirmDeleteModal(onConfirm) {
    const modal = document.getElementById('confirmDeleteModal');
    if (modal) {
      const translations = modalTranslations[currentLanguage];
      const modalTitle = modal.querySelector('.modal-title');
      const modalBody = modal.querySelector('.modal-body');
      const confirmBtn = modal.querySelector('.btn-danger');
      const cancelBtn = modal.querySelector('.btn-secondary');
      
      if (modalTitle) {
        modalTitle.textContent = translations.deleteConfirm;
      }
      if (modalBody) {
        modalBody.textContent = translations.deleteConfirmContent;
      }
      if (confirmBtn) {
        confirmBtn.textContent = translations.delete;
        confirmBtn.onclick = () => {
          const modalInstance = bootstrap.Modal.getInstance(modal);
          if (modalInstance) {
            modalInstance.hide();
          }
          onConfirm();
        };
      }
      if (cancelBtn) {
        cancelBtn.textContent = translations.cancel || 'Cancel';
      }
      new bootstrap.Modal(modal).show();
    }
  }
  // ==============================================================

  // ===================== –ë–õ–û–ö –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô =====================
  // –ö–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ (–¥–µ—Å–∫—Ç–æ–ø + –º–æ–±–∏–ª—å–Ω—ã–π)
  const loginBtn = document.getElementById("loginBtn");
  const mobileLoginBtn = document.getElementById('mobile-login-btn');

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–æ–≥–∏–Ω–∞
  const loginModalEl = document.getElementById("loginModal");

  // –ö–Ω–æ–ø–∫–∞ Google –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –º–æ–¥–∞–ª–∫–∏
  const googleSignInBtn = document.getElementById("googleSignInBtn");

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —à–∞–ø–∫–µ –¥–µ—Å–∫—Ç–æ–ø–∞ –∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
  const userInfo = document.getElementById("userInfo"); 
  const userInfoMobile = document.getElementById("userInfo-mobile"); 

  // // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
  // async function signInWithGoogle() {
  //   const provider = new GoogleAuthProvider();
  //   const result = await signInWithPopup(auth, provider);
  //   return result.user;
  // }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è ¬´–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google¬ª (–∫–Ω–æ–ø–∫–∞ –≤ –º–æ–¥–∞–ª–∫–µ `loginModal`)
  if (googleSignInBtn) {
    googleSignInBtn.addEventListener("click", async () => {
      try {
        const user = await signInWithGoogle();
        if (user) {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
          const loginModal = bootstrap.Modal.getInstance(loginModalEl);
          if (loginModal) {
            loginModal.hide();
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º UI-–∫–Ω–æ–ø–∫–∏ (–ª–æ–≥–∏–Ω/–ª–æ–≥–∞—É—Ç)
          updateLoginButtons();
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
      }
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  function handleSignOut() {
    signOut(auth)
      .then(() => {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", err);
        // –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
      });
  }

  // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Login/Logout (–¥–µ—Å–∫—Ç–æ–ø –∏ –º–æ–±–∏–ª—å–Ω–∞—è)
  let isLoginModalOpen = false;

  function handleLoginClick() {
      if (auth.currentUser) {
          // –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äì –≤—ã—Ö–æ–¥–∏–º
          handleSignOut();
      } else if (!isLoginModalOpen) {
          // –ù–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
          const loginModal = new bootstrap.Modal(loginModalEl, {
              backdrop: true,
              keyboard: true
          });
          loginModal.show();
          isLoginModalOpen = true;
  
          // –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
          loginModalEl.addEventListener('hidden.bs.modal', () => {
              isLoginModalOpen = false;
          });
      }
  }

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ (–¥–µ—Å–∫—Ç–æ–ø –∏ –º–æ–±–∏–ª—å–Ω–∞—è)
  loginBtn.addEventListener("click", handleLoginClick);
  mobileLoginBtn.addEventListener("click", handleLoginClick);

  // ===================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =====================

  // ===================== –ë–õ–û–ö –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú/–ü–†–û–°–ú–û–¢–†–û–ú =====================
  // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const saveToCloudBtn = document.getElementById("saveToCloudBtn");
  const showResultsBtn = document.getElementById("showResultsBtn");

  // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const mobileSaveBtn = document.getElementById('mobile-save-btn');
  const mobileViewBtn = document.getElementById('mobile-view-btn');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async function saveResult() {
    try {
      await saveResultToFirestore(new Date().toLocaleString(), spheres);
      showModal('saveSuccessModal', 'savedToCloud');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      initializeHistorySlider();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∫–Ω–æ–ø–∫–∏ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª
  if (saveToCloudBtn) {
    saveToCloudBtn.addEventListener('click', () => {
      if (!auth.currentUser) {
        // –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        const loginModal = new bootstrap.Modal(loginModalEl);
        loginModal.show();
        return;
      }
      saveResult();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (save/view)
  mobileSaveBtn.addEventListener('click', () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    saveResult();
  });

  mobileViewBtn.addEventListener('click', () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    showResultsModal();
  });

  // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
  showResultsBtn.addEventListener("click", () => {
    if (!auth.currentUser) {
      const loginModal = new bootstrap.Modal(loginModalEl);
      loginModal.show();
      return;
    }
    showResultsModal();
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
  async function showResultsModal() {
    const resultsModalEl = document.getElementById("resultsModal");
    const resultsModal = new bootstrap.Modal(resultsModalEl, {
      backdrop: "static",
      keyboard: true
    });

    try {
      const entries = await loadResultsList();
      const resultsListEl = document.getElementById("resultsList");
      resultsListEl.innerHTML = "";

      if (entries.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        const noResultsDiv = document.createElement("div");
        noResultsDiv.classList.add("text-center", "py-4");

        const travoltaImg = document.createElement("img");
        travoltaImg.src = "img/travolta.gif";
        travoltaImg.alt = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤";
        travoltaImg.style.maxWidth = "200px";

        const noResultsText = document.createElement("p");
        noResultsText.classList.add("mt-3", "text-muted");
        noResultsText.textContent = (currentLanguage === "ru")
          ? "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
          : "No saved results yet";

        noResultsDiv.appendChild(travoltaImg);
        noResultsDiv.appendChild(noResultsText);
        resultsListEl.appendChild(noResultsDiv);

      } else {
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å, —Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫
        entries.forEach((entry) => {
          const row = document.createElement("div");
          row.classList.add("d-flex", "justify-content-between", "align-items-center", "mb-2");

          const titleSpan = document.createElement("span");
          titleSpan.style.flexGrow = "1";
          titleSpan.style.marginRight = "1rem";

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
          const dateStr = entry.createdAt?.seconds
            ? new Date(entry.createdAt.seconds * 1000).toLocaleString()
            : new Date().toLocaleString();
          titleSpan.textContent = dateStr;

          const buttonsContainer = document.createElement("div");
          buttonsContainer.classList.add("d-flex", "align-items-center");
          buttonsContainer.style.flexShrink = "0";

          const loadBtn = document.createElement("button");
          loadBtn.className = "btn btn-sm btn-primary me-2";
          loadBtn.textContent = "‚ñ∂Ô∏è";
          loadBtn.style.width = "40px";

          const delBtn = document.createElement("button");
          delBtn.className = "btn btn-sm btn-danger";
          delBtn.textContent = "‚ùå";
          delBtn.style.width = "40px";

          // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          loadBtn.addEventListener("click", async () => {
            const data = await loadSavedResult(entry.id);
            if (!data) {
              showModal("loadErrorModal", 'loaded');
              return;
            }
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Å–ª–∞–π–¥–µ—Ä–∞–º
            Object.keys(data).forEach(sphereId => {
              const sphereData = data[sphereId];
              Object.keys(sphereData).forEach(questionId => {
                const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
                if (slider) {
                  slider.value = sphereData[questionId];
                  updateSliderDisplay(sphereId, questionId, sphereData[questionId]);
                }
              });
              updateSphereAverage(sphereId);
            });
            updateOverallAverage();
            drawWheel();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–£—Å–ø–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–æ¬ª
            const modalInstance = bootstrap.Modal.getInstance(resultsModalEl);
            if (modalInstance) modalInstance.hide();
            showModal("loadSuccessModal", 'loaded');
          });

          // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          delBtn.addEventListener("click", () => {
            showConfirmDeleteModal(async () => {
              try {
                await deleteSavedResult(entry.id);
                const modalInstance = bootstrap.Modal.getInstance(resultsModalEl);
                if (modalInstance) {
                  modalInstance.hide();
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                showResultsModal();
                initializeHistorySlider();
                showModal("deleteSuccessModal", 'deleted');
              } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
                showModal("deleteErrorModal", 'deleteConfirm');
              }
            });
          });

          buttonsContainer.appendChild(loadBtn);
          buttonsContainer.appendChild(delBtn);
          row.appendChild(titleSpan);
          row.appendChild(buttonsContainer);
          resultsListEl.appendChild(row);
        });
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª
      const resultsModalTitle = document.querySelector('#resultsModal .modal-title');
      if (resultsModalTitle) {
        resultsModalTitle.textContent = modalTranslations[currentLanguage].myResults;
      }

      resultsModal.show();

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
      showModal("loadErrorModal", 'loaded');
    }
  }
  // ==================== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ü–†–û–°–ú–û–¢–†–ê ====================


  // ==================  –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –ö–ù–û–ü–û–ö –∏ USERINFO  ====================
  function updateLoginButtons() {
    if (auth.currentUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      loginBtn.innerText = (currentLanguage === 'ru') ? 'üë§ –í—ã–π—Ç–∏' : 'üë§ Logout';
      mobileLoginBtn.textContent = (currentLanguage === 'ru') ? 'üë§ –í—ã–π—Ç–∏' : 'üë§ Logout';
    } else {
      // –ù–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      loginBtn.innerText = (currentLanguage === 'ru') ? 'üë§ –í–æ–π—Ç–∏' : 'üë§ Login';
      mobileLoginBtn.textContent = (currentLanguage === 'ru') ? 'üë§ –í–æ–π—Ç–∏' : 'üë§ Login';
    }
  }

  function updateSaveButtons() {
    // –î–µ—Å–∫—Ç–æ–ø
    if (saveToCloudBtn) {
      saveToCloudBtn.innerText = buttonTexts[currentLanguage].save;
    }
    if (showResultsBtn) {
      showResultsBtn.innerText = buttonTexts[currentLanguage].view;
    }
    // –ú–æ–±–∏–ª—å–Ω—ã–µ
    if (mobileSaveBtn) {
      mobileSaveBtn.innerText = buttonTexts[currentLanguage].save;
    }
    if (mobileViewBtn) {
      mobileViewBtn.innerText = buttonTexts[currentLanguage].view;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏/email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–ø–∫–µ
  function updateUserInfo() {
    const user = auth.currentUser;
    if (user) {
      const displayName = user.displayName || user.email || "";
      userInfo.textContent = displayName;
      userInfoMobile.textContent = displayName;
    } else {
      userInfo.textContent = "";
      userInfoMobile.textContent = "";
    }
  }

  function updateUILanguage() {
    // –ö–Ω–æ–ø–∫–∏ ¬´Login/Logout¬ª + ¬´Save/View¬ª
    updateLoginButtons();
    updateSaveButtons();
    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserInfo();

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–º–æ–π –º–æ–¥–∞–ª–∫–∏ –ª–æ–≥–∏–Ω–∞
    const loginModalLabel = document.getElementById("loginModalLabel");
    const modalBodyText = document.querySelector("#loginModal .modal-body p");
    if (currentLanguage === "ru") {
      if (loginModalLabel) loginModalLabel.innerText = "–í—Ö–æ–¥";
      if (modalBodyText) modalBodyText.innerText = "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é:";
    } else {
      if (loginModalLabel) loginModalLabel.innerText = "Login";
      if (modalBodyText) modalBodyText.innerText = "Sign in with:";
    }
  }
  // ===========================================================================


  // ======================== onAuthStateChanged ================================
  onAuthStateChanged(auth, (user) => {
    if (user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.uid);
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å >1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
      initializeHistorySlider();
    } else {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
      const historySliderContainer = document.getElementById("historySliderContainer");
      if (historySliderContainer) {
        historySliderContainer.classList.add("d-none");
      }
    }
    // –ü—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–ª–æ–≥–∏–Ω/–ª–æ–≥–∞—É—Ç) ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∏–º—è
    updateUILanguage();
  });
  // ===========================================================================


  // ======================== –†–ê–ë–û–¢–ê –° –¢–ê–ë–ê–ú–ò/–ö–û–õ–ï–°–û–ú ==========================
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å—Ñ–µ—Ä (–∏ –∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
   */
  function renderTabs() {
    const savedValues = {};
    spheres.forEach(sphere => {
      sphere.questions.forEach(question => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        if (slider) {
          savedValues[sphere.id] = savedValues[sphere.id] || {};
          savedValues[sphere.id][question.id] = slider.value;
        }
      });
    });

    const tabList = document.getElementById("sphereTabs");
    const tabContent = document.getElementById("sphereTabContent");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –±—ã–ª
    const activeTabId = document.querySelector("#sphereTabs .nav-link.active")?.id;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    tabList.innerHTML = "";
    tabContent.innerHTML = "";

    spheres.forEach((sphere) => {
      const li = document.createElement("li");
      li.className = "nav-item";

      const btn = document.createElement("button");
      btn.className = "nav-link sphere-tab-btn"; 
      btn.id = "tab-" + sphere.id;
      btn.type = "button";
      btn.setAttribute("data-color", sphere.color);
      btn.setAttribute("data-bs-toggle", "tab");
      btn.setAttribute("data-bs-target", "#pane-" + sphere.id);
      btn.role = "tab";

      let avg = (5.0).toFixed(1);
      if (savedValues[sphere.id]) {
        let sum = 0, count = 0;
        for (const key in savedValues[sphere.id]) {
          sum += parseInt(savedValues[sphere.id][key]);
          count++;
        }
        if (count) {
          avg = (sum / count).toFixed(1);
        }
      }
      const isMob = window.innerWidth < 576;
      if (isMob) {
        btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
      } else {
        btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
      }
      li.appendChild(btn);
      tabList.appendChild(li);

      const pane = document.createElement("div");
      pane.className = "tab-pane fade";
      pane.id = "pane-" + sphere.id;
      pane.role = "tabpanel";

      const header = document.createElement("h5");
      header.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
      header.className = "mb-3 mt-3";
      pane.appendChild(header);

      sphere.questions.forEach((question) => {
        const formGroup = document.createElement("div");
        formGroup.className = "mb-3";

        const label = document.createElement("label");
        label.className = "form-label sphere-header";
        label.setAttribute("for", `slider_${sphere.id}_${question.id}`);
        label.innerText = question.title[currentLanguage];
        formGroup.appendChild(label);

        const sliderWrapper = document.createElement("div");
        sliderWrapper.className = "slider-wrapper";

        const rangeContainer = document.createElement("div");
        rangeContainer.className = "range-container";

        const slider = document.createElement("input");
        slider.type = "range";
        slider.className = "form-range slider-control";
        slider.id = `slider_${sphere.id}_${question.id}`;
        slider.min = "0";
        slider.max = "10";
        slider.value = (savedValues[sphere.id] && savedValues[sphere.id][question.id]) || "5";
        slider.style.setProperty('--slider-thumb-color', sphere.color);

        slider.addEventListener("input", () => {
          updateSliderDisplay(sphere.id, question.id, slider.value);
          updateSphereAverage(sphere.id);
          drawWheel();
        });

        const desc = document.createElement("div");
        desc.id = `desc_${sphere.id}_${question.id}`;
        desc.className = "form-text slider-desc";
        const initVal = slider.value;
        desc.innerText = question.descriptions[initVal]
          ? question.descriptions[initVal][currentLanguage]
          : '';

        let val = parseInt(initVal, 10);
        let fraction = val / 10;
        let r = Math.round(255 * (1 - fraction));
        let g = Math.round(255 * fraction);
        desc.style.color = `rgb(${r}, ${g}, 0)`;

        rangeContainer.appendChild(slider);
        sliderWrapper.appendChild(rangeContainer);
        sliderWrapper.appendChild(desc);
        formGroup.appendChild(sliderWrapper);
        pane.appendChild(formGroup);
      });

      tabContent.appendChild(pane);
    });

    updateOverallAverage();

    // –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∫–∞–∫–∞—è-—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (activeTabId) {
      const newActiveTab = document.getElementById(activeTabId);
      if (newActiveTab) {
        newActiveTab.classList.add("active");
        const paneId = newActiveTab.getAttribute("data-bs-target");
        const activePane = document.querySelector(paneId);
        if (activePane) {
          activePane.classList.add("show", "active");
        }
      }
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–∫—Ä—ã–≤–∞—Ç—å FAQ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ñ–µ—Ä—ã
    const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
    tabLinks.forEach(tab => {
      tab.addEventListener('click', () => {
        const sphereId = tab.id.split('-')[1]; // –ü–æ–ª—É—á–∞–µ–º ID —Å—Ñ–µ—Ä—ã
        console.log(`Tab clicked: ${sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        showTabContent(sphereId); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ñ–µ—Ä—ã
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ¬´–∫—Ä–∞—Å–∏–≤–æ—Å—Ç–∏¬ª
      tab.addEventListener("shown.bs.tab", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
        updateTabStyles();
      });
      tab.addEventListener("hidden.bs.tab", () => {
        updateTabStyles();
      });
      tab.addEventListener('mouseenter', () => {
        tab.style.boxShadow = `0 0 7px 2.5px ${tab.getAttribute("data-color")}`;
      });
      tab.addEventListener('mouseleave', () => {
        tab.style.boxShadow = 'none';
      });
    });

    updateTabStyles();
  }

  function updateTabStyles() {
    const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
    tabLinks.forEach(tab => {
      if (tab.classList.contains("active")) {
        tab.style.backgroundColor = tab.getAttribute("data-color");
        tab.style.color = "#333333";
      } else {
        tab.style.backgroundColor = "";
        tab.style.color = darkMode ? "#fff" : "#000";
      }
    });
  }

  function updateSliderDisplay(sphereId, questionId, value) {
    const sphere = spheres.find(s => s.id === sphereId);
    if (!sphere) return;
    const question = sphere.questions.find(q => q.id === questionId);
    if (!question) return;
    const descElem = document.getElementById(`desc_${sphereId}_${questionId}`);
    const dict = question.descriptions[value];
    descElem.innerText = dict ? dict[currentLanguage] : "";

    let val = parseInt(value, 10);
    let fraction = val / 10;
    let r = Math.round(255 * (1 - fraction));
    let g = Math.round(255 * fraction);
    descElem.style.color = `rgb(${r}, ${g}, 0)`;
  }

  function updateSphereAverage(sphereId) {
    const sphere = spheres.find(s => s.id === sphereId);
    if (!sphere) return;
    let sum = 0, count = 0;
    sphere.questions.forEach(question => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      sum += parseInt(slider.value);
      count++;
    });

    const avg = (sum / (count || 1)).toFixed(1);
    const tabButton = document.getElementById("tab-" + sphereId);
    const isMobileView = window.innerWidth < 576;

    if (isMobileView) {
      tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
    } else {
      tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
    }

    const paneHeader = document.querySelector(`#pane-${sphereId} h5`);
    if (paneHeader) {
      paneHeader.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
    }
    updateOverallAverage();
  }

  function updateOverallAverage() {
    let total = 0, count = 0;
    spheres.forEach(sphere => {
      sphere.questions.forEach(question => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        total += parseInt(slider.value);
        count++;
      });
    });
    const overall = (total / (count || 1)).toFixed(1);
    document.getElementById("overallAverage").innerText =
      (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;
  }

  function drawWheel() {
    const canvas = document.getElementById("balanceWheel");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    ctx.clearRect(0, 0, width, height);

    wheelSectors = [];

    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) / 2 - 30;
    const anglePerSphere = (2 * Math.PI) / spheres.length;
    let startAngle = -Math.PI / 2;

    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const sectorsContainer = document.getElementById('sectorsContainer');
    if (!sectorsContainer) {
        console.error("Container for sectors not found!");
        return;
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    sectorsContainer.innerHTML = '';

    spheres.forEach((sphere) => {
        let sum = 0, count = 0;
        sphere.questions.forEach((question) => {
            const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
            sum += parseInt(slider.value);
            count++;
        });
        const avg = sum / (count || 1);
        const fraction = avg / 10;
        const sectorRadius = fraction * maxRadius;

        const endAngle = startAngle + anglePerSphere;
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, sectorRadius, startAngle, endAngle);
        ctx.closePath();
        ctx.fillStyle = sphere.color || "#CCC";
        ctx.fill();
        ctx.strokeStyle = darkMode ? "#ccc" : "#666";
        ctx.stroke();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è tooltip
        wheelSectors.push({
            sphereId: sphere.id,
            startAngle: startAngle,
            endAngle: endAngle,
            radius: sectorRadius,
            sphereObj: sphere
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
        const sectorElement = document.createElement('div');
        sectorElement.id = "sector-" + sphere.id; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
        sectorElement.className = "sector"; // –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        sectorsContainer.appendChild(sectorElement); // –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        // –ü–æ–¥–ø–∏—Å—å —É –∫—Ä–∞—è —Å–µ–∫—Ç–æ—Ä–∞
        const midAngle = startAngle + anglePerSphere / 2;
        const labelRadius = maxRadius * 0.7;
        const labelX = centerX + labelRadius * Math.cos(midAngle);
        const labelY = centerY + labelRadius * Math.sin(midAngle);
        
        ctx.font = "16px sans-serif"; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        ctx.fillStyle = darkMode ? "#fff" : "#000";
        ctx.fillText(`${sphere.emoji || ""} ${sphere.title[currentLanguage]}`, labelX, labelY); // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏

        startAngle = endAngle;
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
  function showTabContent(sphereId) {
    console.log(`Showing content for sphere: ${sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    const tabContent = document.getElementById("sphereTabContent");
    const activePane = document.querySelector(`#pane-${sphereId}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    const allPanes = document.querySelectorAll(".tab-pane");
    allPanes.forEach(pane => {
        pane.classList.remove("show", "active");
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
    if (activePane) {
        activePane.classList.add("show", "active");
        tabContent.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
        faqContent.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º FAQ
        console.log(`Active pane shown: ${activePane.id}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        const sector = wheelSectors.find(s => s.sphereId === sphereId);
        if (sector) {
            highlightSector(sphereId, true);
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                highlightSector(sphereId, false);
            }, 500);
        }
    } else {
        console.error(`No active pane found for sphere: ${sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–µ–∫—Ç–æ—Ä–∞
  let activeWheelSector = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞

  function highlightSector(sphereId, isHighlighted, isActive = false) {
    const sector = wheelSectors.find(sector => sector.sphereId === sphereId);
    console.log(`Highlighting sector: ${sphereId}, isHighlighted: ${isHighlighted}, isActive: ${isActive}`);

    if (sector) {
        const canvas = document.getElementById("balanceWheel");
        const ctx = canvas.getContext("2d");
        
        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å canvas –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ç–æ—Ä–∞
        wheelSectors.forEach(s => {
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, canvas.height / 2);
            ctx.arc(canvas.width / 2, canvas.height / 2, s.radius, s.startAngle, s.endAngle);
            ctx.closePath();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞
            const isCurrentActive = s.sphereId === activeWheelSector;
            const isCurrentHighlighted = s.sphereId === sphereId && (isHighlighted || isActive);
            const isHovered = s.sphereId === sphereId && isHighlighted;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            ctx.fillStyle = s.sphereObj.color || "#CCC";
            
            if (isCurrentActive || isCurrentHighlighted) {
                ctx.shadowColor = s.sphereObj.color || "#CCC";
                ctx.shadowBlur = 20;
                ctx.globalAlpha = 1.0;
                
                // –î–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º
                if (isCurrentActive) {
                    const color = s.sphereObj.color || "#CCC";
                    ctx.fillStyle = color;
                    ctx.shadowBlur = 25;
                }
                
                // –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –∏ –∞–∫—Ç–∏–≤–Ω—ã–π, –∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                if (isCurrentActive && isHovered) {
                    ctx.shadowBlur = 30;
                }
            } else {
                // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä–∞
                ctx.shadowBlur = 0;
                ctx.globalAlpha = 0.95;
                
                // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–æ–º
                if (isHovered) {
                    ctx.globalAlpha = 1.0;
                    ctx.shadowBlur = 15;
                    ctx.shadowColor = s.sphereObj.color || "#CCC";
                }
            }
            
            ctx.fill();
            ctx.strokeStyle = darkMode ? "#ccc" : "#666";
            ctx.stroke();
            ctx.restore();
            
            // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            if (s.text) {
                ctx.save();
                ctx.globalAlpha = 1.0;
                drawSectorText(s);
                ctx.restore();
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
        if (isActive) {
            activeWheelSector = sphereId;
        }
    } else {
        console.error(`Sector not found for sphereId: ${sphereId}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–∫—Ç–æ—Ä
  const canvas = document.getElementById("balanceWheel");
  let highlightTimeout; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞

  canvas.addEventListener('mousemove', (e) => {
    const hoveredSector = getSectorUnderCursor(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
    if (hoveredSector) {
        console.log(`Mouse over sector: ${hoveredSector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        clearTimeout(highlightTimeout); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        highlightSector(hoveredSector.sphereId, true, hoveredSector.sphereId === activeWheelSector); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ —Å canvas
  canvas.addEventListener('mouseleave', () => {
    clearTimeout(highlightTimeout);
    if (activeWheelSector) {
        highlightSector(activeWheelSector, false, true); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
    } else {
        drawWheel(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä
  canvas.addEventListener('click', (e) => {
    const hoveredSector = getSectorUnderCursor(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
    if (hoveredSector) {
        console.log(`Clicked on sector: ${hoveredSector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        const tabButton = document.getElementById("tab-" + hoveredSector.sphereId);
        if (tabButton) {
            tabButton.click(); // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            showTabContent(hoveredSector.sphereId); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        }
        highlightSector(hoveredSector.sphereId, false, true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    } else {
        console.log(`Clicked outside of sectors`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (activeWheelSector) {
            highlightSector(activeWheelSector, false, true); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        }
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
  function updateSliderDisplay(sphereId, questionId, value) {
    const displayElement = document.getElementById(`value_${sphereId}_${questionId}`);
    if (displayElement) {
        displayElement.textContent = value;
        updateSphereAverage(sphereId);
        drawWheel();
        if (activeWheelSector) {
            highlightSector(activeWheelSector, false, true); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
  function highlightActiveSector(sphereId) {
    console.log(`Highlighting active sector: ${sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    wheelSectors.forEach(sector => {
        const isActive = sector.sphereId === sphereId;
        highlightSector(sector.sphereId, isActive);
    });
  }

  // –°–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  function initializeHistorySlider() {
    loadResultsList().then(entries => {
      if (entries.length < 2) {
        document.getElementById("historySliderContainer").classList.add("d-none");
        return;
      }
      const historySliderContainer = document.getElementById("historySliderContainer");
      historySliderContainer.classList.remove("d-none");

      entries.sort((a, b) => a.createdAt.seconds - b.createdAt.seconds);

      const historySlider = document.getElementById("historySlider");
      historySlider.min = "0";
      historySlider.max = entries.length - 1;
      historySlider.value = entries.length - 1;

      updateHistoryDateDisplay(historySlider.value, entries);
      updateCanvasFromHistory(entries, historySlider.value);

      historySlider.addEventListener("input", (e) => {
        const value = e.target.value;
        updateHistoryDateDisplay(value, entries);
        updateCanvasFromHistory(entries, value);
      });
    }).catch(error => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
      showModal("loadErrorModal", 'loaded');
    });
  }

  function updateHistoryDateDisplay(value, entries) {
    const entry = entries[value];
    const date = new Date(entry.createdAt.seconds * 1000);
    document.getElementById("historyDateDisplay").textContent = date.toLocaleString();
  }

  function updateCanvasFromHistory(entries, index) {
    const data = entries[index].data;
    Object.keys(data).forEach(sphereId => {
      const sphereData = data[sphereId];
      Object.keys(sphereData).forEach(questionId => {
        const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
        if (slider) {
          const value = sphereData[questionId];
          slider.value = value;
          updateSliderDisplay(sphereId, questionId, value);
        }
      });
      updateSphereAverage(sphereId);
    });
    drawWheel();
  }
  // ===========================================================================

  // =================== –ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON/PDF ============================
  function initPdfFonts(doc) {
    doc.addFileToVFS("DejaVuSans.ttf", DejaVuSansTTF);
    doc.addFont("DejaVuSans.ttf", "DejaVuSans", "normal");
    doc.setFont("DejaVuSans", "normal");
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–≥–ª—É)
  function updateDateDisplay() {
    const now = new Date();
    const monthsEn = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ];
    const monthsRu = [
      "–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
      "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"
    ];
    const day = now.getDate();
    const monthIndex = now.getMonth();
    const year = now.getFullYear();

    if (currentLanguage === "ru") {
      const monthName = monthsRu[monthIndex];
      const dateString = `${day} ${monthName} ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    } else {
      const monthName = monthsEn[monthIndex];
      const dateString = `${monthName} ${day}, ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    }
  }

  // –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON¬ª (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
  document.getElementById("saveResults")?.addEventListener("click", () => {
    let results = {};
    results.date = new Date().toISOString();
    spheres.forEach((sphere) => {
      let sphereData = {};
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        sphereData[question.id] = parseInt(slider.value);
      });
      results[sphere.id] = sphereData;
    });
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(results, null, 2));
    const downloadAnchor = document.createElement("a");
    downloadAnchor.setAttribute("href", dataStr);
    downloadAnchor.setAttribute("download", "results.json");
    document.body.appendChild(downloadAnchor);
    downloadAnchor.click();
    downloadAnchor.remove();
  });

  // –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF¬ª
  document.getElementById("savePDF")?.addEventListener("click", async () => {
    await document.fonts.ready;
    const originalDarkMode = darkMode;
    darkMode = false;
    document.body.classList.remove("dark-mode");

    const canvas = document.getElementById("balanceWheel");
    canvas.width = 800;
    canvas.height = 800;

    drawWheel();

    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = "high";

    fillCanvasBackground(canvas, "#ffffff");

    setTimeout(() => {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({ unit: "px", format: "a4" });
      initPdfFonts(doc);

      const now = new Date();
      const day = now.getDate();
      const month = now.getMonth() + 1;
      const year = now.getFullYear();
      const dateString = `${day}.${month}.${year}`;

      const canvasData = canvas.toDataURL("image/png");

      let yPos = 20;
      const margin = 20;
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.getWidth();
      const maxTextWidth = pageWidth - margin * 2;

      doc.setFontSize(12);
      doc.text(`Mentorist Balance Wheel (${dateString})`, margin, yPos);
      yPos += 20;

      const imageWidth = 200;
      const xPos = (pageWidth - imageWidth) / 2;
      doc.addImage(canvasData, "PNG", xPos, yPos, imageWidth, 200);
      yPos += 220;
      doc.setFontSize(10);

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ñ–µ—Ä—ã, –≤—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
      spheres.forEach((sphere) => {
        let sum = 0, count = 0;
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          sum += parseInt(slider.value);
          count++;
        });
        const avg = (sum / (count || 1)).toFixed(1);
        const sphereLine = `${sphere.title[currentLanguage]} ${avg}`;
        let sphereLines = doc.splitTextToSize(sphereLine, maxTextWidth);

        sphereLines.forEach((line) => {
          if (yPos > pageHeight - margin) {
            doc.addPage();
            yPos = margin;
          }
          doc.text(line, margin, yPos);
          yPos += 15;
        });

        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          const value = slider.value;
          const answer = question.descriptions[value]
            ? question.descriptions[value][currentLanguage]
            : "";
          const questionLine = `${question.title[currentLanguage]}: ${answer}`;

          let questionLines = doc.splitTextToSize(questionLine, maxTextWidth);
          questionLines.forEach((line) => {
            if (yPos > pageHeight - margin) {
              doc.addPage();
              yPos = margin;
            }
            doc.text(line, margin + 10, yPos);
            yPos += 15;
          });
        });
        yPos += 10;
      });

      // –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
      let total = 0, globalCount = 0;
      spheres.forEach((sphere) => {
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          total += parseInt(slider.value);
          globalCount++;
        });
      });
      const overall = (total / (globalCount || 1)).toFixed(1);
      const overallText = (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;

      let overallLines = doc.splitTextToSize(overallText, maxTextWidth);
      overallLines.forEach((line) => {
        if (yPos > pageHeight - margin) {
          doc.addPage();
          yPos = margin;
        }
        doc.text(line, margin, yPos);
        yPos += 15;
      });

      doc.save("results.pdf");
    }, 200);

    setTimeout(() => {
      darkMode = originalDarkMode;
      if (darkMode) {
        document.body.classList.add("dark-mode");
      } else {
        document.body.classList.remove("dark-mode");
      }
      drawWheel();
    }, 600);
  });
  // ====================== –ö–æ–Ω–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON/PDF ==========================

  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function setupButtons() {
    const isMobile = window.innerWidth < 576;
    const themeBtn = isMobile ? document.getElementById("themeToggle") : document.getElementById("themeToggleDesktop");
    const langBtn = isMobile ? document.getElementById("langToggle") : document.getElementById("langToggleDesktop");
    const faqContent = document.getElementById("faqContent");
    const sphereTabContent = document.getElementById("sphereTabContent");

    // **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ**, –∞ —Å—Ñ–µ—Ä—ã —Å–∫—Ä—ã–≤–∞–µ–º
    if (faqContent) {
      faqContent.style.display = "block";
      faqContent.innerHTML = faqInstructions[currentLanguage];
    }
    if (sphereTabContent) {
      sphereTabContent.style.display = "none";
    }

    if (!themeBtn || !langBtn) return;

    themeBtn.addEventListener("click", () => {
      darkMode = !darkMode;
      document.body.classList.toggle("dark-mode", darkMode);
      themeBtn.innerText = darkMode
        ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
        : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
      updateUILanguage();
      updateTabStyles();
      drawWheel();
    });

    // FAQ-–∫–Ω–æ–ø–∫–∏ (–¥–µ—Å–∫—Ç–æ–ø + –º–æ–±–∏–ª—å–Ω–∞—è)
    const faqBtnDesktop = document.getElementById("faqBtnDesktop");
    const faqBtnMobile = document.getElementById("faqBtnMobile");

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å—Ñ–µ—Ä—ã
    function handleFaqClick() {
      faqContent.classList.remove('faq-content2');
      faqContent.classList.add('faq-content2');
      
      if (!faqContent || !sphereTabContent) return;
      faqContent.innerHTML = faqInstructions[currentLanguage];
      sphereTabContent.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
      faqContent.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ

      // –°–Ω–∏–º–∞–µ–º "active" —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫, –ø—Ä—è—á–µ–º pane
      const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
      tabLinks.forEach(tab => {
        tab.classList.remove("active");
        tab.style.boxShadow = 'none';
        const targetPane = document.querySelector(tab.getAttribute("data-bs-target"));
        if (targetPane) {
          targetPane.classList.remove("show", "active");
        }
      });

      if (window.innerWidth <= 576) {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    }

    if (faqBtnDesktop) faqBtnDesktop.addEventListener("click", handleFaqClick);
    if (faqBtnMobile) faqBtnMobile.addEventListener("click", handleFaqClick);

    // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    langBtn.addEventListener("click", () => {
      const faqIsOpen = (faqContent && faqContent.style.display !== "none");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
      const savedValues = {};
      spheres.forEach(sphere => {
        sphere.questions.forEach(question => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          if (slider) {
            savedValues[sphere.id] = savedValues[sphere.id] || {};
            savedValues[sphere.id][question.id] = slider.value;
          }
        });
      });

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫
      currentLanguage = (currentLanguage === "ru") ? "en" : "ru";

      langBtn.innerText = (currentLanguage === "ru") ? "üåê RU" : "üåê EN";
      themeBtn.innerText = darkMode
        ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
        : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");

      const savePdfBtn = document.getElementById("savePDF");
      if (savePdfBtn) {
        // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, PDF-–∫–Ω–æ–ø–∫–∞ –≤–µ–∑–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è, –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω—è—Ç—å
        savePdfBtn.innerText = (currentLanguage === "ru") ? "üîΩ PDF" : "üîΩ PDF";
      }

      updateDateDisplay();
      updateUILanguage();

      renderTabs();
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∑—É–Ω–∫–∏
      spheres.forEach(sphere => {
        if (savedValues[sphere.id]) {
          sphere.questions.forEach(question => {
            const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
            if (slider) {
              slider.value = savedValues[sphere.id][question.id] || 5;
              updateSliderDisplay(sphere.id, question.id, slider.value);
            }
          });
          updateSphereAverage(sphere.id);
        }
      });
      updateTabStyles();
      drawWheel();

      // –ï—Å–ª–∏ –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ FAQ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç ‚Äî –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–º
      if (faqIsOpen) {
        if (faqContent) {
          faqContent.innerHTML = faqInstructions[currentLanguage];
          faqContent.style.display = "block";
        }
        if (sphereTabContent) {
          sphereTabContent.style.display = "none";
        }
      } else {
        // –ï—Å–ª–∏ –∂–µ FAQ –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –Ω–∞–æ–±–æ—Ä–æ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º FAQ
        if (faqContent) {
          faqContent.style.display = "none";
        }
        if (sphereTabContent) {
          sphereTabContent.style.display = "block";
        }
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  function init() {
    renderTabs();
    updateDateDisplay();
    drawWheel();
    setupButtons();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  init();

  // –ï—Å–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –ª–∏—Å—Ç–∞–µ–º –≤–Ω–∏–∑ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏, –≤–≤–µ—Ä—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  let lastScrollTop = 0;
  window.addEventListener("scroll", function() {
    if (window.innerWidth >= 576) return;
    let st = window.pageYOffset || document.documentElement.scrollTop;
    if (st > lastScrollTop) {
      document.getElementById("sphereTabs").style.transform = "translateY(-200%)";
    } else {
      document.getElementById("sphereTabs").style.transform = "translateY(0)";
    }
    lastScrollTop = st <= 0 ? 0 : st;
  }, false);

  // 3D-—ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–æ–ª–µ—Å–æ
  const canvasWrapper = document.getElementById('canvas-wrapper');
  const wheelContainer = document.getElementById('balanceWheelContainer');
  const glow = wheelContainer.querySelector('.glow');
  let bounds;

  /**
   * Tooltip ‚Äî –ù–ï —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π 3D-–ø–æ–≤–æ—Ä–æ—Ç,
   * –∞ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏–º –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ ¬´–Ω–µ–ø–æ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ¬ª –∫–∞–Ω–≤–∞—Å–∞.
   */
  function showSphereTooltip(e) {
    const canvas = document.getElementById("balanceWheel");
    const tooltip = document.getElementById("canvasTooltip");
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ wheelContainer
    const wheelRect = wheelContainer.getBoundingClientRect();
    const canvasRect = canvas.getBoundingClientRect();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ wheelContainer, –∞ –Ω–µ canvas
    const xInCanvas = e.clientX - wheelRect.left;
    const yInCanvas = e.clientY - wheelRect.top;

    const hoveredSector = getSectorUnderCursor(xInCanvas, yInCanvas);
    if (!hoveredSector) {
      tooltip.style.display = 'none';
      return;
    }
    const sphere = hoveredSector.sphereObj;
    const sphereTitle = sphere.title[currentLanguage] || sphere.title["en"];

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    let questionsHtml = '';
    sphere.questions.forEach(question => {
      const sliderId = `slider_${sphere.id}_${question.id}`;
      const sliderEl = document.getElementById(sliderId);
      if (!sliderEl) return;
      const val = sliderEl.value;
      const desc = question.descriptions[val] 
        ? question.descriptions[val][currentLanguage] 
        : '';
      questionsHtml += `<div style="margin-bottom:2px;">
        <strong>${question.title[currentLanguage]}:</strong> ${desc}
      </div>`;
    });
    const tooltipHtml = `
      <div style="font-weight:600; margin-bottom:6px;">${sphereTitle}</div>
      ${questionsHtml}
    `;
    tooltip.innerHTML = tooltipHtml;
    tooltip.style.left = (e.pageX + 15) + 'px';
    tooltip.style.top  = (e.pageY + 15) + 'px';
    tooltip.style.display = 'block';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ —É–≥–æ–ª –º—ã—à–∏ –≤ —Å–µ–∫—Ç–æ—Ä
  function isAngleInArc(angle, start, end) {
    if (start <= end) {
        return angle >= start && angle <= end;
    } else {
        // –ï—Å–ª–∏ –¥—É–≥–∞ "–ø–µ—Ä–µ–≤–∞–ª–∏–≤–∞–µ—Ç" —á–µ—Ä–µ–∑ 2œÄ
        return (angle >= start && angle < 2 * Math.PI) || (angle >= 0 && angle <= end);
    }
  }

  function getSectorUnderCursor(mouseX, mouseY) {
    const canvas = document.getElementById("balanceWheel");
    const canvasRect = canvas.getBoundingClientRect();
    const centerX = canvasRect.width / 2;
    const centerY = canvasRect.height / 2;
    const dx = mouseX - centerX;
    const dy = mouseY - centerY;
    const r = Math.sqrt(dx * dx + dy * dy);

    let angle = Math.atan2(dy, dx);
    if (angle < 0) {
        angle += 2 * Math.PI;
    }

    console.log(`Mouse Position: (${mouseX}, ${mouseY}), Angle: ${angle}, Radius: ${r}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    for (let sector of wheelSectors) {
        let startAngle = sector.startAngle;
        let endAngle = sector.endAngle;
        if (startAngle < 0) startAngle += 2 * Math.PI;
        if (endAngle < 0) endAngle += 2 * Math.PI;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —É–≥–æ–ª –≤ —Å–µ–∫—Ç–æ—Ä
        if (isAngleInArc(angle, startAngle, endAngle)) {
            // –ò –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–¥–∏—É—Å
            if (r <= sector.radius) {
                console.log(`Sector found: ${sector.sphereId}`); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                highlightSector(sector.sphereId, true);
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
                canvas.addEventListener('mouseleave', () => {
                    highlightSector(sector.sphereId, false);
                }, { once: true });
                return sector;
            }
        }
    }
    return null;
  }

  /**
   * 3D-–ø–æ–≤–æ—Ä–æ—Ç –∫–æ–ª–µ—Å–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è tooltip,
   * –Ω–æ —Å–∞–º—É –∞–Ω–∏–º–∞—Ü–∏—é/–Ω–∞–∫–ª–æ–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º.
   */
  function rotateCanvas(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è deviceorientation –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (e.type === 'deviceorientation') {
      const alpha = e.alpha; // –ö–æ–º–ø–∞—Å: 0-360
      const beta = e.beta;   // –ù–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥: -180-180
      const gamma = e.gamma; // –ù–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ: -90-90

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –≤ –ø–æ–≤–æ—Ä–æ—Ç canvas
      const dx = gamma * 10;
      const dy = beta * 10;
      const distance = Math.sqrt(dx * dx + dy * dy);

      wheelContainer.style.transform = `
        scale3d(1.07, 1.07, 1.07)
        rotate3d(
          ${dy / 100},
          ${-dx / 100},
          0,
          ${Math.log(distance) * 2}deg
        )
      `;
      return;
    }

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ wheelContainer
    const rect = wheelContainer.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    const dx = e.clientX - centerX;
    const dy = e.clientY - centerY;
    const distance = Math.sqrt(dx * dx + dy * dy);

    // –ü–æ–≤–æ—Ä–æ—Ç
    wheelContainer.style.transform = `
      scale3d(1.07, 1.07, 1.07)
      rotate3d(
        ${dy / 100},
        ${-dx / 100},
        0,
        ${Math.log(distance) * 2}deg
      )
    `;
    // –ë–ª–∏–∫
    const leftX = e.clientX - rect.left;
    const topY = e.clientY - rect.top;
    glow.style.backgroundImage = `
      radial-gradient(
        circle at
        ${leftX}px ${topY}px,
        rgba(255, 255, 255, 0.2),
        transparent 70%
      )
    `;
    // Tooltip (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π 3D-–ø–æ–≤–æ—Ä–æ—Ç)
    showSphereTooltip(e);
  }

  canvasWrapper.addEventListener('mouseenter', () => {
    bounds = wheelContainer.getBoundingClientRect();
    document.addEventListener('mousemove', rotateCanvas);
  });

  canvasWrapper.addEventListener('mouseleave', () => {
    document.removeEventListener('mousemove', rotateCanvas);
    wheelContainer.style.transform = 'scale3d(1, 1, 1) rotate3d(0, 0, 0, 0deg)';
    glow.style.backgroundImage = 'none';
    const tooltip = document.getElementById('canvasTooltip');
    if (tooltip) {
      tooltip.style.display = 'none';
    }
  });

  window.addEventListener('deviceorientation', function(event) {
    const alpha = event.alpha; // Rotation around z-axis
    const beta = event.beta; // Rotation around x-axis
    const gamma = event.gamma; // Rotation around y-axis

    // Calculate rotation based on device orientation
    const rotateX = beta / 90; // Normalize to [-1, 1]
    const rotateY = gamma / 90; // Normalize to [-1, 1]

    // Apply rotation to the canvas
    wheelContainer.style.transform = `
      scale3d(1.07, 1.07, 1.07)
      rotate3d(
        ${rotateX},
        ${-rotateY},
        0,
        ${Math.log(Math.abs(rotateX) + Math.abs(rotateY) + 1) * 2}deg
      )
    `;

    // Adjust glow effect based on orientation
    const leftX = (rotateY + 1) * rect.width / 2;
    const topY = (rotateX + 1) * rect.height / 2;
    glow.style.backgroundImage = `
      radial-gradient(
        circle at
        ${leftX}px ${topY}px,
        rgba(255, 255, 255, 0.2),
        transparent 70%
      )
    `;
  });
});
// –ö–æ–Ω–µ—Ü DOMContentLoaded
