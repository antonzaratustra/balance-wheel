// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ FAQ
const faqInstructions = {
  ru: `<strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mentorist Life Balance Wheel!</strong><br><br>
  –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∂–∏–∑–Ω–∏ –ø–æ 8 –∫–ª—é—á–µ–≤—ã–º —Å—Ñ–µ—Ä–∞–º: –ó–¥–æ—Ä–æ–≤—å–µ, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –û–∫—Ä—É–∂–µ–Ω–∏–µ, –ü—Ä–∏–∑–≤–∞–Ω–∏–µ, –§–∏–Ω–∞–Ω—Å—ã, –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –∏ –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å.<br><br>
  <strong>1. –¢–µ–º–∞ –∏ —è–∑—ã–∫:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞ <span class="btn-like">üåê RU</span> –∏ <span class="btn-like">üåô –¢—ë–º–Ω–∞—è</span> / <span class="btn-like">üåû –°–≤–µ—Ç–ª–∞—è</span>.<br><br>
  <strong>2. FAQ:</strong> –ù–∞–∂–º–∏—Ç–µ <span class="btn-like">üí° FAQ</span> –¥–ª—è —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏; –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ñ–µ—Ä–∞–º ‚Äì –Ω–∞–∂–º–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É —Å—Ñ–µ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä <span class="btn-like">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ (5.0)</span>.<br><br>
  <strong>3. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:</strong> –í–∫–ª–∞–¥–∫–∏ –≤–≤–µ—Ä—Ö—É –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ñ–µ—Ä–∞–º–∏ –∂–∏–∑–Ω–∏.<br><br>
  <strong>4. –û—Ü–µ–Ω–∫–∞:</strong> –í –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ –µ—Å—Ç—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç 0 –¥–æ 10.<br><br>
  <strong>5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏.<br><br>
  <strong>6. –°—Ä–µ–¥–Ω–µ–µ:</strong> –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏ –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.<br><br>
  <strong>7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ <span class="btn-like">üë§ Login</span>, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <span class="btn-like">üíæ</span> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ –∏–ª–∏ <span class="btn-like">‚òÅÔ∏è</span> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ö–Ω–æ–ø–∫–∞ <span class="btn-like">üîΩ PDF</span> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.<br><br>
  <strong>8. –ò—Å—Ç–æ—Ä–∏—è:</strong> –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–ª–∞–π–¥–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∫–æ–ª–µ—Å–æ–º –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∫–æ–ª–µ—Å–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.`,
    
    en: `<strong>Welcome to Mentorist Life Balance Wheel!</strong><br><br>
  This is a tool for assessing life balance across 8 key areas: Health, Relationships, Environment, Calling, Finance, Self-Improvement, Life Brightness, and Spirituality.<br><br>
  <strong>1. Theme and Language:</strong> Use the buttons to switch theme and language <span class="btn-like">üåê EN</span> and <span class="btn-like">üåô Dark</span> / <span class="btn-like">üåû Light</span>.<br><br>
  <strong>2. FAQ:</strong> Click <span class="btn-like">üí° FAQ</span> for this instruction; to return to spheres - click the sphere tab, e.g., <span class="btn-like">‚ù§Ô∏è Health (5.0)</span>.<br><br>
  <strong>3. Switching:</strong> Tabs at the top allow you to switch between life areas.<br><br>
  <strong>4. Assessment:</strong> Each area has 5 questions. Use sliders to rate from 0 to 10.<br><br>
  <strong>5. Visualization:</strong> The balance wheel visually displays your ratings.<br><br>
  <strong>6. Average:</strong> Average values for each area and overall are calculated automatically.<br><br>
  <strong>7. Saving:</strong> To save results, click <span class="btn-like">üë§ Login</span> to log in. Then use the <span class="btn-like">üíæ</span> button to save to the cloud or <span class="btn-like">‚òÅÔ∏è</span> to view saved results. The <span class="btn-like">üîΩ PDF</span> button allows you to download results as PDF.<br><br>
  <strong>8. History:</strong> After logging in, you can use the history slider to view previous results. The slider is located below the balance wheel and allows you to navigate between saved dates. When you select a date, the wheel updates with ratings from that date.`,
};

// –ò–º–ø–æ—Ä—Ç auth –∏–∑ firebase-init.js
import { auth } from "./firebase-init.js";
import { DejaVuSansTTF } from './fonts.js';
import { spheres } from './js/spheres.js';

// –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ firebase/auth
import {
  GoogleAuthProvider,
  signInWithPopup,
  signOut,
  onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";

import {
  saveResultToFirestore,
  loadResultsList,
  loadSavedResult,
  deleteSavedResult
} from "./firestore-utils.js";

document.addEventListener("DOMContentLoaded", () => {
  // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
  const loader = document.getElementById("loader");
  if (loader) {
    loader.remove();
  }

  function initLoadingAnimation() {
    const colMd7 = document.querySelector('.col-md-7');
    const canvasWrapper = document.getElementById('canvas-wrapper');
    const faqContent = document.getElementById('faqContent');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å loading –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    colMd7.classList.add('loading');
    canvasWrapper.classList.add('loading');
    faqContent.classList.add('loading');
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å loading —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      colMd7.classList.remove('loading');
      canvasWrapper.classList.remove('loading');
      faqContent.classList.remove('loading');
    }, 50); // 50ms –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
  }

  initLoadingAnimation();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let isMobile = window.innerWidth < 576;
window.addEventListener("resize", () => {
  isMobile = window.innerWidth < 576;
});






function fillCanvasBackground(canvas, color) {
  const ctx = canvas.getContext("2d");
  ctx.save();
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–∑–∞–¥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  ctx.globalCompositeOperation = "destination-over";
  ctx.fillStyle = color;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}




/***************************************************
 * 1. –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ: –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê + –ê–ù–ì–õ–ò–ô–°–ö–ò–ô
 ***************************************************/
let currentLanguage = "en"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
let darkMode = true;        // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞





































const saveToCloudBtn = document.getElementById("saveToCloudBtn");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modalTranslations = {
  ru: {
    savedToCloud: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –æ–±–ª–∞–∫–æ!",
    loaded: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
    deleteConfirm: "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
    deleted: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω!",
    loginRequired: "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!",
    myResults: "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
    success: "–£—Å–ø–µ—Ö",
    delete: "–£–¥–∞–ª–∏—Ç—å",
    noResults: "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
    load: "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
    cancel: "–û—Ç–º–µ–Ω–∞"
  },
  en: {
    savedToCloud: "Result successfully saved to the cloud!",
    loaded: "Result successfully loaded!",
    deleteConfirm: "Are you sure you want to delete the result?",
    deleted: "Result deleted!",
    loginRequired: "Please log in first!",
    myResults: "My Results",
    success: "Success",
    delete: "Delete",
    noResults: "No saved results yet",
    load: "Load",
    cancel: "Cancel"
  }
};

function showModal(modalId, messageKey = null) {
  const modal = document.getElementById(modalId);
  if (modal && messageKey) {
    const modalTitle = modal.querySelector('.modal-title');
    const modalBody = modal.querySelector('.modal-body');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    const translations = modalTranslations[currentLanguage];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (modalTitle) {
      modalTitle.textContent = translations[messageKey] || translations.success;
    }
    if (modalBody) {
      modalBody.textContent = translations[messageKey] || translations.success;
    }
  }
  if (modal) {
    new bootstrap.Modal(modal).show();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async function saveResult() {
  try {
    await saveResultToFirestore(new Date().toLocaleString(), spheres);
    showModal('saveSuccessModal', 'savedToCloud');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    initializeHistorySlider();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
if (saveToCloudBtn) {
  saveToCloudBtn.addEventListener('click', () => {
    if (!auth.currentUser) {
      showModal("authModal", 'loginRequired');
      return;
    }
    saveResult();
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
const mobileSaveBtn = document.getElementById('mobile-save-btn');
const mobileLoginBtn = document.getElementById('mobile-login-btn');
const mobileViewBtn = document.getElementById('mobile-view-btn');

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
const buttonTexts = {
  ru: {
    save: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    login: 'üîë –í–æ–π—Ç–∏',
    logout: 'üîë –í—ã–π—Ç–∏',
    view: '‚òÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
  },
  en: {
    save: 'üíæ Save',
    login: 'üîë Login',
    logout: 'üîë Logout',
    view: '‚òÅÔ∏è View Results'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
function updateMobileButtons() {
  const isLoggedIn = auth.currentUser;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
  mobileSaveBtn.textContent = buttonTexts[currentLanguage].save;
  mobileLoginBtn.textContent = isLoggedIn 
    ? buttonTexts[currentLanguage].logout
    : buttonTexts[currentLanguage].login;
  mobileViewBtn.textContent = buttonTexts[currentLanguage].view;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
updateMobileButtons();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
mobileSaveBtn.addEventListener('click', () => {
  if (!auth.currentUser) {
    showModal("authModal", 'loginRequired');
    return;
  }
  saveResult();
});

mobileLoginBtn.addEventListener('click', () => {
  if (!auth.currentUser) {
    signInWithGoogle();
  } else {
    signOut(auth).then(() => {
      updateMobileButtons();
    }).catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
    });
  }
});

mobileViewBtn.addEventListener('click', () => {
  if (!auth.currentUser) {
    showModal("authModal", 'loginRequired');
    return;
  }
  showResults();
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
function updateUILanguage() {
  updateMobileButtons();
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
}

const showResultsBtn = document.getElementById("showResultsBtn");
const resultsModalEl = document.getElementById("resultsModal");
const resultsListEl = document.getElementById("resultsList");

showResultsBtn.addEventListener("click", async () => {
  if (!auth.currentUser) {
    showModal("authModal", 'loginRequired');
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
  const modal = new bootstrap.Modal(resultsModalEl);
  modal.show();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
  const entries = await loadResultsList();
  // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  resultsListEl.innerHTML = "";

  if (entries.length === 0) {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢—Ä–∞–≤–æ–ª—Ç—É
    const noResultsDiv = document.createElement("div");
    noResultsDiv.classList.add("text-center", "py-4");
    
    const travoltaImg = document.createElement("img");
    travoltaImg.src = "img/travolta.gif";
    travoltaImg.alt = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤";
    travoltaImg.style.maxWidth = "200px";
    
    const noResultsText = document.createElement("p");
    noResultsText.classList.add("mt-3", "text-muted");
    noResultsText.textContent = currentLanguage === "ru" ? 
      "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" : 
      "No saved results yet";
    
    noResultsDiv.appendChild(travoltaImg);
    noResultsDiv.appendChild(noResultsText);
    resultsListEl.appendChild(noResultsDiv);
    return;
  }

  entries.forEach((entry) => {
    // entry.id, entry.title, entry.createdAt, entry.data
    const row = document.createElement("div");
    row.classList.add("d-flex", "justify-content-between", "align-items-center", "mb-2");

    // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
    const titleSpan = document.createElement("span");
    titleSpan.style.flexGrow = "1";
    titleSpan.style.marginRight = "1rem";
    const dateStr = entry.createdAt?.seconds
      ? new Date(entry.createdAt.seconds * 1000).toLocaleString()
      : new Date().toLocaleString();
    titleSpan.textContent = dateStr;

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π —Å–ø—Ä–∞–≤–∞)
    const buttonsContainer = document.createElement("div");
    buttonsContainer.classList.add("d-flex", "align-items-center");
    buttonsContainer.style.flexShrink = "0";

    // –ö–Ω–æ–ø–∫–∏ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å¬ª –∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª
    const loadBtn = document.createElement("button");
    loadBtn.className = "btn btn-sm btn-primary me-2";
    loadBtn.textContent = "‚ñ∂Ô∏è";
    loadBtn.style.width = "40px"; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫

    const delBtn = document.createElement("button");
    delBtn.className = "btn btn-sm btn-danger";
    delBtn.textContent = "‚ùå";
    delBtn.style.width = "40px"; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫

    loadBtn.addEventListener("click", async () => {
      const data = await loadSavedResult(entry.id);
      if (!data) {
        showModal("loadErrorModal", 'loaded');
        return;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Å–ª–∞–π–¥–µ—Ä–∞–º
      Object.keys(data).forEach(sphereId => {
        const sphereData = data[sphereId];
        Object.keys(sphereData).forEach(questionId => {
          const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
          if (slider) {
            slider.value = sphereData[questionId];
            updateSliderDisplay(sphereId, questionId, sphereData[questionId]);
          }
        });
        updateSphereAverage(sphereId);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ –∫–æ–ª–µ—Å–æ
      updateOverallAverage();
      drawWheel();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const modal = bootstrap.Modal.getInstance(resultsModalEl);
      modal.hide();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      showModal("loadSuccessModal", 'loaded');
    });

    delBtn.addEventListener("click", async () => {
      showConfirmDeleteModal(async () => {
        try {
          await deleteSavedResult(entry.id);
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          const modal = bootstrap.Modal.getInstance(resultsModalEl);
          modal.hide();
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          showResultsBtn.click();
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
          initializeHistorySlider();
          showModal("deleteSuccessModal", 'deleted');
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
          showModal("deleteErrorModal", 'deleteConfirm');
        }
      });
    });

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    buttonsContainer.appendChild(loadBtn);
    buttonsContainer.appendChild(delBtn);
    row.appendChild(titleSpan);
    row.appendChild(buttonsContainer);
    resultsListEl.appendChild(row);
  });

  
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é drawWheel –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
function drawWheel(ctx, width, height) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  ctx.save();
  
  // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
  ctx.clearRect(0, 0, width, height);
  
  const centerX = width / 2;
  const centerY = height / 2;
  const maxRadius = Math.min(width, height) / 2 - 30;
  
  // –†–∏—Å—É–µ–º –∫–æ–ª–µ—Å–æ
  const anglePerSphere = (2 * Math.PI) / spheres.length;
  let startAngle = -Math.PI / 2;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
  const shifts = {
    leftShift:   { x: 45,  y: 0 },
    rightShift:  { x: -60, y: 0 },
    topShift:    { x: 0,   y: -10 },
    bottomShift: { x: 0,   y: 10 }
  };
  const threshold = 0.2;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.font = "18px sans-serif";

  spheres.forEach((sphere) => {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä—ã
    let sum = 0, count = 0;
    sphere.questions.forEach((question) => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      sum += parseInt(slider.value);
      count++;
    });
    const avg = sum / (count || 1);
    const fraction = avg / 10;
    const sectorRadius = fraction * maxRadius;

    // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
    const endAngle = startAngle + anglePerSphere;
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, sectorRadius, startAngle, endAngle);
    ctx.closePath();
    ctx.fillStyle = sphere.color || "#CCC";
    ctx.fill();
    ctx.strokeStyle = darkMode ? "#ccc" : "#666";
    ctx.stroke();

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–µ–∫—Ç–æ—Ä–∞
    const midAngle = startAngle + anglePerSphere / 2;
    const cosMid = Math.cos(midAngle);
    const sinMid = Math.sin(midAngle);
    const labelRadius = maxRadius + 10;
    let labelX = centerX + labelRadius * cosMid;
    let labelY = centerY + labelRadius * sinMid;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç. –î–ª—è —Å—Ñ–µ—Ä—ã health —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫,
    // –∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äì –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–¥–≤–∏–≥.
    const sphereTitle = sphere.title[currentLanguage] || sphere.title["en"];
    let text = "";
    let shift = { x: 0, y: 0 };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–¥–≤–∏–≥–∏ –¥–ª—è —Å—Ñ–µ—Ä "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ" –∏ "–Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏"
    if (sphere.id === "selfImprovement" || sphere.id === "lifeBrightness") {
      shift.x = 10; // —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –Ω–∞ 10 –ø–∏–∫—Å–µ–ª–µ–π
    }

    if (sphere.id === "health") {
      // –î–ª—è health –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –Ω–æ –Ω–µ —Å–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
      text = `${sphereTitle} ${avg.toFixed(1)} ${sphere.emoji || ""}`;
      shift = { x: 0, y: 0 };
    } else {
      if (cosMid > threshold) {
        shift = shifts.rightShift;
        text = `${sphereTitle} ${avg.toFixed(1)} ${sphere.emoji || ""}`;
      } else if (cosMid < -threshold) {
        shift = shifts.leftShift;
        text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
      } else {
        if (sinMid > 0) {
          shift = shifts.topShift;
          text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
        } else {
          shift = shifts.bottomShift;
          text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
        }
      }
    }
    labelX += shift.x;
    labelY += shift.y;

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç ‚Äì –±–ª–∞–≥–æ–¥–∞—Ä—è center-–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é –æ–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ (labelX, labelY)
    ctx.shadowColor = darkMode ? "#000" : "#fff";
    ctx.shadowBlur = 2;
    ctx.fillStyle = darkMode ? "#fff" : "#000";
    ctx.fillText(text, labelX, labelY);
    ctx.shadowBlur = 0;

    // –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.lineTo(centerX + maxRadius * Math.cos(startAngle),
               centerY + maxRadius * Math.sin(startAngle));
    ctx.stroke();

    startAngle = endAngle;
  });

  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  ctx.beginPath();
  ctx.moveTo(centerX, centerY);
  ctx.lineTo(centerX + maxRadius * Math.cos(startAngle),
             centerY + maxRadius * Math.sin(startAngle));
  ctx.stroke();
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  ctx.restore();
}

/****************************************
 * 3. –†–ï–ù–î–ï–† –í–ö–õ–ê–î–û–ö –ò –≠–õ–ï–ú–ï–ù–¢–û–í UI
 ****************************************/
function renderTabs() {
  const savedValues = {};
  spheres.forEach(sphere => {
    sphere.questions.forEach(question => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      if (slider) {
        savedValues[sphere.id] = savedValues[sphere.id] || {};
        savedValues[sphere.id][question.id] = slider.value;
      }
    });
  });

  const tabList = document.getElementById("sphereTabs");
  const tabContent = document.getElementById("sphereTabContent");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const activeTabId = document.querySelector("#sphereTabs .nav-link.active")?.id;

  tabList.innerHTML = "";
  tabContent.innerHTML = "";

  spheres.forEach((sphere) => {
    // –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫—É
    const li = document.createElement("li");
    li.className = "nav-item";

    const btn = document.createElement("button");
    btn.className = "nav-link sphere-tab-btn"; 
    btn.id = "tab-" + sphere.id;
    btn.type = "button";
    btn.setAttribute("data-color", sphere.color);
    btn.setAttribute("data-bs-toggle", "tab");
    btn.setAttribute("data-bs-target", "#pane-" + sphere.id);
    btn.role = "tab";

    let avg = (5.0).toFixed(1);
    if (savedValues[sphere.id]) {
      let sum = 0, count = 0;
      for (const key in savedValues[sphere.id]) {
        sum += parseInt(savedValues[sphere.id][key]);
        count++;
      }
      if (count) {
        avg = (sum / count).toFixed(1);
      }
    }

    let isMobileView = window.innerWidth < 576;
    // –¢–µ–∫—Å—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ (–º–æ–±–∏–ª—å–Ω–∞—è/–¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if (isMobileView) {
      btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
    } else {
      btn.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
    }
    li.appendChild(btn);
    tabList.appendChild(li);

    // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
    const pane = document.createElement("div");
    pane.className = "tab-pane fade";
    pane.id = "pane-" + sphere.id;
    pane.role = "tabpanel";

    const header = document.createElement("h5");
    header.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
    header.className = "mb-3 mt-3";
    pane.appendChild(header);

    // –í–æ–ø—Ä–æ—Å—ã —Å –ø–æ–ª–∑—É–Ω–∫–∞–º–∏
    sphere.questions.forEach((question) => {
      const formGroup = document.createElement("div");
      formGroup.className = "mb-3";

      const label = document.createElement("label");
      label.className = "form-label sphere-header";
      label.setAttribute("for", `slider_${sphere.id}_${question.id}`);
      label.innerText = question.title[currentLanguage];
      formGroup.appendChild(label);

      // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ + –æ–ø–∏—Å–∞–Ω–∏–µ
      const sliderWrapper = document.createElement("div");
      sliderWrapper.className = "slider-wrapper";

      // -- –í–ê–ñ–ù–û: range-container --
      // –ó–¥–µ—Å—å —Å–æ–∑–¥–∞—ë–º div —Å –∫–ª–∞—Å—Å–æ–º "range-container", –≤–Ω—É—Ç—Ä—å –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª–∞–¥—ë–º —Å–∞–º <input type="range">
      const rangeContainer = document.createElement("div");
      rangeContainer.className = "range-container";

      // –°–æ–∑–¥–∞—ë–º —Å–∞–º —Å–ª–∞–π–¥–µ—Ä
      const slider = document.createElement("input");
      slider.type = "range";
      slider.className = "form-range slider-control";
      slider.id = `slider_${sphere.id}_${question.id}`;
      slider.min = "0";
      slider.max = "10";
      slider.value = (savedValues[sphere.id] && savedValues[sphere.id][question.id]) || "5";
      // –¶–≤–µ—Ç thumb –±–µ—Ä—ë–º –∏–∑ sphere.color
      slider.style.setProperty('--slider-thumb-color', sphere.color);

      slider.addEventListener("input", () => {
        updateSliderDisplay(sphere.id, question.id, slider.value);
        updateSphereAverage(sphere.id);
        drawWheel();
      });

      // –û–ø–∏—Å–∞–Ω–∏–µ
      const desc = document.createElement("div");
      desc.id = `desc_${sphere.id}_${question.id}`;
      desc.className = "form-text slider-desc";
      const initVal = slider.value;
      desc.innerText = question.descriptions[initVal]
        ? question.descriptions[initVal][currentLanguage]
        : "";
      let val = parseInt(initVal, 10);
      let fraction = val / 10; // <-- –≤–º–µ—Å—Ç–æ (val - 1)/9
      let r = Math.round(255 * (1 - fraction));
      let g = Math.round(255 * fraction);
      desc.style.color = `rgb(${r}, ${g}, 0)`;

      // –í–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ rangeContainer
      rangeContainer.appendChild(slider);
      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º rangeContainer –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ sliderWrapper
      sliderWrapper.appendChild(rangeContainer);
      sliderWrapper.appendChild(desc);

      // –í–∫–ª–∞–¥—ã–≤–∞–µ–º sliderWrapper –≤ formGroup
      formGroup.appendChild(sliderWrapper);
      pane.appendChild(formGroup);
    });

    tabContent.appendChild(pane);
  });

  updateOverallAverage();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  if (activeTabId) {
    const newActiveTab = document.getElementById(activeTabId);
    if (newActiveTab) {
      newActiveTab.classList.add("active");
      const paneId = newActiveTab.getAttribute("data-bs-target");
      const activePane = document.querySelector(paneId);
      if (activePane) {
        activePane.classList.add("show", "active");
      }
    }
  } else {
    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ
    const faqTab = document.getElementById("faqBtnDesktop") || document.getElementById("faqBtnMobile");
    if (faqTab) {
      faqTab.click();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
  const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
  tabLinks.forEach(tab => {
    tab.addEventListener("shown.bs.tab", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
      updateTabStyles();
    });
    tab.addEventListener("hidden.bs.tab", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
      updateTabStyles();
    });
    tab.addEventListener('mouseenter', () => {
      tab.style.boxShadow = `0 0 7px 2.5px ${tab.getAttribute("data-color")}`;
    });

    tab.addEventListener('mouseleave', () => {
      tab.style.boxShadow = 'none';
    });

    tab.addEventListener('click', () => {
      // –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
      tab.style.boxShadow = `0 0 10px 5px ${tab.getAttribute("data-color")}`;
    });
  });
  updateTabStyles();
}

function updateTabStyles() {
  const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
  tabLinks.forEach(tab => {
    if (tab.classList.contains("active")) {
      tab.style.backgroundColor = tab.getAttribute("data-color");
      tab.style.color = "#333"; 
    } else {
      tab.style.backgroundColor = "";
      // –í —Ç—ë–º–Ω–æ–π —Ç–µ–º–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ‚Äì –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç, –≤ —Å–≤–µ—Ç–ª–æ–π ‚Äì —á—ë—Ä–Ω—ã–π
      tab.style.color = darkMode ? "#fff" : "#000";
    }
  });
}

function updateSphereAverage(sphereId) {
  const sphere = spheres.find(s => s.id === sphereId);
  if (!sphere) return;
  let sum = 0, count = 0;
  sphere.questions.forEach(question => {
    const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
    sum += parseInt(slider.value);
    count++;
  });
  const avg = (sum / (count || 1)).toFixed(1);
  const tabButton = document.getElementById("tab-" + sphereId);
  const isMobile = window.innerWidth < 576;

  if (isMobile) {
    tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
  } else {
    tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
  }

  const paneHeader = document.querySelector(`#pane-${sphereId} h5`);
  paneHeader.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
  updateOverallAverage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
function updateDateDisplay() {
  const now = new Date();
  const monthsEn = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];
  const monthsRu = [
    "–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
    "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"
  ];
  const day = now.getDate();
  const monthIndex = now.getMonth();
  const year = now.getFullYear();
  
  if (currentLanguage === "ru") {
    // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ: "24 –º–∞—Ä—Ç–∞ 2025"
    const monthName = monthsRu[monthIndex];
    const dateString = `${day} ${monthName} ${year}`;
    document.getElementById("currentDate").innerText = `(${dateString})`;
  } else {
    // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: "March 24, 2025"
    const monthName = monthsEn[monthIndex];
    const dateString = `${monthName} ${day}, ${year}`;
    document.getElementById("currentDate").innerText = `(${dateString})`;
  }
}

function updateSliderDisplay(sphereId, questionId, value) {
  const sphere = spheres.find(s => s.id === sphereId);
  if (!sphere) return;
  const question = sphere.questions.find(q => q.id === questionId);
  if (!question) return;
  const descElem = document.getElementById(`desc_${sphereId}_${questionId}`);
  const dict = question.descriptions[value];
  descElem.innerText = dict ? dict[currentLanguage] : "";

  let val = parseInt(value, 10);
  let fraction = val / 10; // <-- –≤–º–µ—Å—Ç–æ (val - 1)/9
  let r = Math.round(255 * (1 - fraction));
  let g = Math.round(255 * fraction);
  descElem.style.color = `rgb(${r}, ${g}, 0)`;

  updateSphereAverage(sphereId); // –£—á–∏—Ç—ã–≤–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
}

function updateOverallAverage() {
  let total = 0, count = 0;
  spheres.forEach(sphere => {
    sphere.questions.forEach(question => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      total += parseInt(slider.value);
      count++;
    });
  });
  const overall = (total / (count || 1)).toFixed(1);
  document.getElementById("overallAverage").innerText =
    (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;
}

function updateTabStyles() {
  const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
  tabLinks.forEach(tab => {
    if (tab.classList.contains("active")) {
      tab.style.backgroundColor = tab.getAttribute("data-color");
      tab.style.color = "#333333"; // –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ‚Äì —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    } else {
      tab.style.backgroundColor = "";
      // –í —Ç—ë–º–Ω–æ–π —Ç–µ–º–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ‚Äì –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç, –≤ —Å–≤–µ—Ç–ª–æ–π ‚Äì —á—ë—Ä–Ω—ã–π
      tab.style.color = darkMode ? "#fff" : "#000";
    }
  });
}

function updateSliderDisplay(sphereId, questionId, value) {
  const sphere = spheres.find(s => s.id === sphereId);
  if (!sphere) return;
  const question = sphere.questions.find(q => q.id === questionId);
  if (!question) return;
  const descElem = document.getElementById(`desc_${sphereId}_${questionId}`);
  const dict = question.descriptions[value];
  descElem.innerText = dict ? dict[currentLanguage] : "";
  let val = parseInt(value, 10);
  let fraction = val / 10; // <-- –≤–º–µ—Å—Ç–æ (val - 1)/9
  let r = Math.round(255 * (1 - fraction));
  let g = Math.round(255 * fraction);
  descElem.style.color = `rgb(${r}, ${g}, 0)`;
}

function updateSphereAverage(sphereId) {
  const sphere = spheres.find(s => s.id === sphereId);
  if (!sphere) return;
  let sum = 0, count = 0;
  sphere.questions.forEach(question => {
    const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
    sum += parseInt(slider.value);
    count++;
  });

  const avg = (sum / (count || 1)).toFixed(1); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const tabButton = document.getElementById("tab-" + sphereId);
  const isMobile = window.innerWidth < 576;

  if (isMobile) {
    tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-average">${avg}</span>`;
  } else {
    tabButton.innerHTML = `<span class="tab-emoji">${sphere.emoji || ""}</span> <span class="tab-title">${sphere.title[currentLanguage]}</span> <span class="tab-average">(${avg})</span>`;
  }

  const paneHeader = document.querySelector(`#pane-${sphereId} h5`);
  if (paneHeader) {
    paneHeader.innerText = `${sphere.emoji || ""} ${sphere.title[currentLanguage]} - ${avg}`;
  }

  updateOverallAverage();
}

/****************************************
 * 4. –†–ò–°–û–í–ê–ù–ò–ï ¬´–ö–û–õ–ï–°–ê¬ª (–°–ï–ö–¢–û–†–û–í)
 ****************************************/
// 1) –í–ù–ï —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –Ω–∏–∫–∞–∫–æ–π prevSide –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –≤—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç–µ –∏–º–µ–Ω–Ω–æ "Health".

function drawWheel() {
  const canvas = document.getElementById("balanceWheel");
  const ctx = canvas.getContext("2d");
  const width = canvas.width;
  const height = canvas.height;
  ctx.clearRect(0, 0, width, height);
  
  const centerX = width / 2;
  const centerY = height / 2;
  const maxRadius = Math.min(width, height) / 2 - 30;
  const anglePerSphere = (2 * Math.PI) / spheres.length;
  let startAngle = -Math.PI / 2;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ñ–µ—Ä
  const shifts = {
    leftShift:   { x: 45,  y: 0 },
    rightShift:  { x: -60, y: 0 },
    topShift:    { x: 0,   y: -10 },
    bottomShift: { x: 0,   y: 10 }
  };
  const threshold = 0.2;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  ctx.font = "18px sans-serif";

  spheres.forEach((sphere) => {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä—ã
    let sum = 0, count = 0;
    sphere.questions.forEach((question) => {
      const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
      sum += parseInt(slider.value);
      count++;
    });
    const avg = sum / (count || 1);
    const fraction = avg / 10;
    const sectorRadius = fraction * maxRadius;

    // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
    const endAngle = startAngle + anglePerSphere;
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, sectorRadius, startAngle, endAngle);
    ctx.closePath();
    ctx.fillStyle = sphere.color || "#CCC";
    ctx.fill();
    ctx.strokeStyle = darkMode ? "#ccc" : "#666";
    ctx.stroke();

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–µ–∫—Ç–æ—Ä–∞
    const midAngle = startAngle + anglePerSphere / 2;
    const cosMid = Math.cos(midAngle);
    const sinMid = Math.sin(midAngle);
    const labelRadius = maxRadius + 10;
    let labelX = centerX + labelRadius * cosMid;
    let labelY = centerY + labelRadius * sinMid;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç. –î–ª—è —Å—Ñ–µ—Ä—ã health —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫,
    // –∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äì –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–¥–≤–∏–≥.
    const sphereTitle = sphere.title[currentLanguage] || sphere.title["en"];
    let text = "";
    let shift = { x: 0, y: 0 };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–¥–≤–∏–≥–∏ –¥–ª—è —Å—Ñ–µ—Ä "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ" –∏ "–Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏"
    if (sphere.id === "selfImprovement" || sphere.id === "lifeBrightness") {
      shift.x = 10; // —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –Ω–∞ 10 –ø–∏–∫—Å–µ–ª–µ–π
    }

    if (sphere.id === "health") {
      // –î–ª—è health –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –Ω–æ –Ω–µ —Å–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
      text = `${sphereTitle} ${avg.toFixed(1)} ${sphere.emoji || ""}`;
      shift = { x: 0, y: 0 };
    } else {
      if (cosMid > threshold) {
        shift = shifts.rightShift;
        text = `${sphereTitle} ${avg.toFixed(1)} ${sphere.emoji || ""}`;
      } else if (cosMid < -threshold) {
        shift = shifts.leftShift;
        text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
      } else {
        if (sinMid > 0) {
          shift = shifts.topShift;
          text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
        } else {
          shift = shifts.bottomShift;
          text = `${sphere.emoji || ""} ${sphereTitle} ${avg.toFixed(1)}`;
        }
      }
    }
    labelX += shift.x;
    labelY += shift.y;

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç ‚Äì –±–ª–∞–≥–æ–¥–∞—Ä—è center-–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é –æ–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ (labelX, labelY)
    ctx.shadowColor = darkMode ? "#000" : "#fff";
    ctx.shadowBlur = 2;
    ctx.fillStyle = darkMode ? "#fff" : "#000";
    ctx.fillText(text, labelX, labelY);
    ctx.shadowBlur = 0;

    // –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.lineTo(centerX + maxRadius * Math.cos(startAngle),
               centerY + maxRadius * Math.sin(startAngle));
    ctx.stroke();

    startAngle = endAngle;
  });

  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  ctx.beginPath();
  ctx.moveTo(centerX, centerY);
  ctx.lineTo(centerX + maxRadius * Math.cos(startAngle),
             centerY + maxRadius * Math.sin(startAngle));
  ctx.stroke();
}

/****************************************
 * 5. –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ò –¢–ï–ú–´ –ò –Ø–ó–´–ö–ê
 ****************************************/
function setupButtons() {
  console.log("setupButtons started");
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç FAQ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const faqContent = document.getElementById("faqContent");
  const sphereTabContent = document.getElementById("sphereTabContent");
  
  console.log("FAQ elements initialization:");
  console.log("faqContent:", faqContent);
  console.log("sphereTabContent:", sphereTabContent);
  
  if (faqContent) {
    faqContent.style.display = "block";
    faqContent.innerHTML = faqInstructions[currentLanguage];
    console.log("faqContent initialized");
  }
  if (sphereTabContent) {
    sphereTabContent.style.display = "block";
    console.log("sphereTabContent initialized");
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–∞–∫ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ö–µ–¥–µ—Ä–µ (–Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ), —Ç–∞–∫ –∏ –≤–Ω–∏–∑—É (–Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º)
  const themeBtn = document.getElementById("themeToggle");
  const langBtn = document.getElementById("langToggle");

  themeBtn.addEventListener("click", () => {
    darkMode = !darkMode;
    document.body.classList.toggle("dark-mode", darkMode);
  
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    themeBtn.innerText = darkMode
      ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
      : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
  
      updateUILanguage();
    updateTabStyles();
    drawWheel();
  });
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ FAQ (–Ω–µ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ FAQ)
  

  
  

  function handleFaqClick() {
    console.log("handleFaqClick called");
    console.log("faqContent:", document.getElementById("faqContent"));
    console.log("sphereTabContent:", document.getElementById("sphereTabContent"));
    
    const faqContent = document.getElementById("faqContent");
    const sphereTabContent = document.getElementById("sphereTabContent");
    
    if (faqContent && sphereTabContent) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FAQ
      faqContent.innerHTML = faqInstructions[currentLanguage];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ, —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ñ–µ—Ä
      sphereTabContent.style.display = "none";
      faqContent.style.display = "block";

      // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ —Å—Ñ–µ—Ä
      const tabLinks = document.querySelectorAll("#sphereTabs .nav-link");
      tabLinks.forEach(tab => {
        tab.classList.remove("active");
        tab.style.boxShadow = 'none';
        const targetPane = document.querySelector(tab.getAttribute("data-bs-target"));
        if (targetPane) {
          targetPane.classList.remove("show", "active");
        }
      });

      console.log("FAQ content updated and shown");
      console.log("faqContent display:", faqContent.style.display);
      console.log("sphereTabContent display:", sphereTabContent.style.display);

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      if (window.innerWidth <= 576) {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    } else {
      console.log("FAQ elements not found!");
    }
  }

  // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –æ–±–µ–∏–º –∫–Ω–æ–ø–∫–∞–º FAQ:
  const faqBtnDesktop = document.getElementById("faqBtnDesktop");
  const faqBtnMobile = document.getElementById("faqBtnMobile");
  
  console.log("FAQ buttons initialization:");
  console.log("faqBtnDesktop:", faqBtnDesktop);
  console.log("faqBtnMobile:", faqBtnMobile);
  
  if (faqBtnDesktop) {
    faqBtnDesktop.addEventListener("click", handleFaqClick);
  }
  if (faqBtnMobile) {
    faqBtnMobile.addEventListener("click", handleFaqClick);
  }
  
  langBtn.addEventListener("click", () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FAQ (–æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç)
    const faqContent = document.getElementById("faqContent");
    const faqIsOpen = faqContent.style.display !== "none";
  
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
    const savedValues = {};
    spheres.forEach(sphere => {
      sphere.questions.forEach(question => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        if (slider) {
          savedValues[sphere.id] = savedValues[sphere.id] || {};
          savedValues[sphere.id][question.id] = slider.value;
        }
      });
    });
  

    
    // 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫
    currentLanguage = (currentLanguage === "ru") ? "en" : "ru";
  
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    langBtn.innerText = (currentLanguage === "ru") ? "üåê RU" : "üåê EN";
    themeBtn.innerText = darkMode
      ? (currentLanguage === "ru" ? "üåô –¢—ë–º–Ω–∞—è" : "üåô Dark")
      : (currentLanguage === "ru" ? "üåû –°–≤–µ—Ç–ª–∞—è" : "üåû Light");
    const savePdfBtn = document.getElementById("savePDF");
    savePdfBtn.innerText = (currentLanguage === "ru") ? "üîΩ PDF" : "üîΩ PDF";
  
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
    updateDateDisplay();
    updateUILanguage();
  
    // 5. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ (–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ñ–µ—Ä) ‚Äì —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã,
    // –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –Ω–µ—ë –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫.
    renderTabs();
  
    // 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
    spheres.forEach(sphere => {
      if (savedValues[sphere.id]) {
        sphere.questions.forEach(question => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          if (slider && savedValues[sphere.id][question.id]) {
            slider.value = savedValues[sphere.id][question.id];
            updateSliderDisplay(sphere.id, question.id, slider.value);
          }
        });
        updateSphereAverage(sphere.id);
      }
    });
  
    // 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
    updateTabStyles();
    drawWheel();
  
    // 8. –ï—Å–ª–∏ FAQ –æ—Ç–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –Ω–æ–≤—ã–π —è–∑—ã–∫
    if (faqIsOpen) {
      faqContent.innerHTML = faqInstructions[currentLanguage];
      // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º FAQ –æ—Ç–∫—Ä—ã—Ç—ã–º (display –Ω–µ –º–µ–Ω—è–µ–º)
    }
  
    // 9. –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –≤–∫–ª–∞–¥–∫–∞–º, —á—Ç–æ–±—ã –ø—Ä–∏ –∏—Ö –∫–ª–∏–∫–µ FAQ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ñ–µ—Ä
    const sphereTabs = document.querySelectorAll("#sphereTabs .nav-link");
    sphereTabs.forEach(tab => {
      tab.addEventListener("click", () => {
        faqContent.style.display = "none";
        document.getElementById("sphereTabContent").style.display = "block";
      });
    });
  });
  
  
  
}

  renderTabs();
  updateDateDisplay();
  drawWheel();
  setupButtons();




const sphereTabs = document.querySelectorAll("#sphereTabs .nav-link");
sphereTabs.forEach(tab => {
  tab.addEventListener("click", () => {
    document.getElementById("faqContent").style.display = "none";
    document.getElementById("sphereTabContent").style.display = "block";
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function initializeHistorySlider() {
  console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏");
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  loadResultsList().then(entries => {
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", entries);
    
    if (entries.length < 2) {
      console.log("–ú–µ–Ω–µ–µ –¥–≤—É—Ö –∑–∞–ø–∏—Å–µ–π, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä");
      // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–µ–Ω—å—à–µ –¥–≤—É—Ö
      document.getElementById("historySliderContainer").classList.add("d-none");
      return;
    }

    console.log("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä, –∑–∞–ø–∏—Å–µ–π:", entries.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä
    const historySliderContainer = document.getElementById("historySliderContainer");
    historySliderContainer.classList.remove("d-none");

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
    entries.sort((a, b) => a.createdAt.seconds - b.createdAt.seconds);
    console.log("–ó–∞–ø–∏—Å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:", new Date(entries[0].createdAt.seconds * 1000));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
    const historySlider = document.getElementById("historySlider");
    historySlider.min = "0";
    historySlider.max = entries.length - 1;
    historySlider.value = entries.length - 1;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
    updateHistoryDateDisplay(historySlider.value, entries);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–≤–∞—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    updateCanvasFromHistory(entries, historySlider.value);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
    historySlider.addEventListener("input", (e) => {
      console.log("–°–ª–∞–π–¥–µ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", e.target.value);
      const value = e.target.value;
      updateHistoryDateDisplay(value, entries);
      updateCanvasFromHistory(entries, value);
    });
  }).catch(error => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
    showModal("loadErrorModal", 'loaded');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –¥–∞—Ç—ã
function updateHistoryDateDisplay(value, entries) {
  const entry = entries[value];
  const date = new Date(entry.createdAt.seconds * 1000);
  document.getElementById("historyDateDisplay").textContent = date.toLocaleString();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–≤–∞—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
function updateCanvasFromHistory(entries, index) {
  const data = entries[index].data;
  Object.keys(data).forEach(sphereId => {
    const sphereData = data[sphereId];
    Object.keys(sphereData).forEach(questionId => {
      const slider = document.getElementById(`slider_${sphereId}_${questionId}`);
      if (slider) {
        const value = sphereData[questionId];
        slider.value = value;
        updateSliderDisplay(sphereId, questionId, value);
      }
    });
    updateSphereAverage(sphereId);
  });
  drawWheel();
}

/****************************************
 * 6. –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –í JSON/PDF
 ****************************************/



  function initPdfFonts(doc) {
    doc.addFileToVFS("DejaVuSans.ttf", DejaVuSansTTF);
    doc.addFont("DejaVuSans.ttf", "DejaVuSans", "normal");
    doc.setFont("DejaVuSans", "normal");
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
  function updateDateDisplay() {
    const now = new Date();
    const monthsEn = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ];
    const monthsRu = [
      "–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
      "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"
    ];
    const day = now.getDate();
    const monthIndex = now.getMonth();
    const year = now.getFullYear();
    
    if (currentLanguage === "ru") {
      // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ: "24 –º–∞—Ä—Ç–∞ 2025"
      const monthName = monthsRu[monthIndex];
      const dateString = `${day} ${monthName} ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    } else {
      // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: "March 24, 2025"
      const monthName = monthsEn[monthIndex];
      const dateString = `${monthName} ${day}, ${year}`;
      document.getElementById("currentDate").innerText = `(${dateString})`;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
  document.getElementById("saveResults")?.addEventListener("click", () => {
    let results = {};
    results.date = new Date().toISOString();
    spheres.forEach((sphere) => {
      let sphereData = {};
      sphere.questions.forEach((question) => {
        const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
        sphereData[question.id] = parseInt(slider.value);
      });
      results[sphere.id] = sphereData;
    });
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(results, null, 2));
    const downloadAnchor = document.createElement("a");
    downloadAnchor.setAttribute("href", dataStr);
    downloadAnchor.setAttribute("download", "results.json");
    document.body.appendChild(downloadAnchor);
    downloadAnchor.click();
    downloadAnchor.remove();
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PDF
  document.getElementById("savePDF")?.addEventListener("click", async () => {
    // –î–æ–∂–¥—ë–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ (–¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ —Ç.–ø.)
    await document.fonts.ready;

    // 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
    const originalDarkMode = darkMode;

    // 2) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
    darkMode = false;
    document.body.classList.remove("dark-mode");

    // (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≤—ã–≤–æ–¥
    const canvas = document.getElementById("balanceWheel");
    canvas.width = 800;   // –Ω–∞–ø—Ä–∏–º–µ—Ä
    canvas.height = 800;  // –Ω–∞–ø—Ä–∏–º–µ—Ä

    // 3) –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ (—Ç–µ–ø–µ—Ä—å –æ–Ω–æ –±—É–¥–µ—Ç –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ)
    drawWheel();

    // 4) –í–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ / –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = "high";

    // 5) –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞ –±–µ–ª—ã–º (—á—Ç–æ–±—ã PDF –≤—Å–µ–≥–¥–∞ –±—ã–ª —Å–≤–µ—Ç–ª—ã–º)
    fillCanvasBackground(canvas, "#ffffff");

    // –ù–µ–º–Ω–æ–≥–æ –∂–¥—ë–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è
    setTimeout(() => {
      // -- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ PDF --
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({ unit: "px", format: "a4" });
      initPdfFonts(doc);

      const now = new Date();
      const day = now.getDate();
      const month = now.getMonth() + 1;
      const year = now.getFullYear();
      const dateString = `${day}.${month}.${year}`;

      // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–≤–∞—Å –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É
      const canvasData = canvas.toDataURL("image/png");

      let yPos = 20;
      const margin = 20;
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.getWidth();
      const maxTextWidth = pageWidth - margin * 2;

      doc.setFontSize(12);
      doc.text(`Mentorist Balance Wheel (${dateString})`, margin, yPos);
      yPos += 20;

      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ–ª–µ—Å–∞
      const imageWidth = 200;
      const xPos = (pageWidth - imageWidth) / 2;
      doc.addImage(canvasData, "PNG", xPos, yPos, imageWidth, 200);
      yPos += 220;
      doc.setFontSize(10);

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ñ–µ—Ä—ã, –≤—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
      spheres.forEach((sphere) => {
        let sum = 0, count = 0;
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          sum += parseInt(slider.value);
          count++;
        });
        const avg = (sum / (count || 1)).toFixed(1);
        const sphereLine = `${sphere.title[currentLanguage]} ${avg}`;
        let sphereLines = doc.splitTextToSize(sphereLine, maxTextWidth);

        sphereLines.forEach((line) => {
          if (yPos > pageHeight - margin) {
            doc.addPage();
            yPos = margin;
          }
          doc.text(line, margin, yPos);
          yPos += 15;
        });

        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          const value = slider.value;
          const answer = question.descriptions[value] ? question.descriptions[value][currentLanguage] : "";
          const questionLine = `${question.title[currentLanguage]}: ${answer}`;

          let questionLines = doc.splitTextToSize(questionLine, maxTextWidth);
          questionLines.forEach((line) => {
            if (yPos > pageHeight - margin) {
              doc.addPage();
              yPos = margin;
            }
            doc.text(line, margin + 10, yPos);
            yPos += 15;
          });
        });

        yPos += 10;
      });

      // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
      let total = 0, globalCount = 0;
      spheres.forEach((sphere) => {
        sphere.questions.forEach((question) => {
          const slider = document.getElementById(`slider_${sphere.id}_${question.id}`);
          total += parseInt(slider.value);
          globalCount++;
        });
      });
      const overall = (total / (globalCount || 1)).toFixed(1);
      const overallText = (currentLanguage === "ru" ? "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: " : "Overall Average: ") + overall;
      
      let overallLines = doc.splitTextToSize(overallText, maxTextWidth);
      overallLines.forEach((line) => {
        if (yPos > pageHeight - margin) {
          doc.addPage();
          yPos = margin;
        }
        doc.text(line, margin, yPos);
        yPos += 15;
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
      doc.save("results.pdf");
    }, 200); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    // 6) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë, –∫–∞–∫ –±—ã–ª–æ (—Ç—ë–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞, –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
    setTimeout(() => {
      darkMode = originalDarkMode;
      if (darkMode) {
        document.body.classList.add("dark-mode");
      } else {
        document.body.classList.remove("dark-mode");
      }
      // –ï—Å–ª–∏ –º–µ–Ω—è–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞ ‚Äì –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å:
      // canvas.width = 600;
      // canvas.height = 600;

      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –æ–±—Ä–∞—Ç–Ω–æ
      drawWheel();
    }, 600);
  });


  let lastScrollTop = 0;
window.addEventListener("scroll", function() {
  // –ï—Å–ª–∏ —ç–∫—Ä–∞–Ω –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π, –≤—ã—Ö–æ–¥–∏–º –∏ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
  if (window.innerWidth >= 576) return;

  let st = window.pageYOffset || document.documentElement.scrollTop;
  if (st > lastScrollTop) {
    // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ ‚Äì —Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    document.getElementById("sphereTabs").style.transform = "translateY(-200%)";
  } else {
    // –°–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    document.getElementById("sphereTabs").style.transform = "translateY(0)";
  }
  lastScrollTop = st <= 0 ? 0 : st;
}, false);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞
const canvasContainer = document.getElementById('balanceWheelContainer');
const glow = document.querySelector('.glow');
let bounds;

function rotateCanvas(e) {
  const mouseX = e.clientX;
  const mouseY = e.clientY;
  const leftX = mouseX - bounds.x;
  const topY = mouseY - bounds.y;
  const center = {
    x: leftX - bounds.width / 2,
    y: topY - bounds.height / 2
  };
  const distance = Math.sqrt(center.x ** 2 + center.y ** 2);

  canvasContainer.style.transform = `
    scale3d(1.07, 1.07, 1.07)
    rotate3d(
      ${center.y / 100},
      ${-center.x / 100},
      0,
      ${Math.log(distance) * 2}deg
    )
  `;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–µ—Å–∫–∞
  glow.style.backgroundImage = `
    radial-gradient(
      circle at
      ${center.x * 2 + bounds.width/2}px
      ${center.y * 2 + bounds.height/2}px,
      #ffffff55,
      #0000000f
    )
  `;
}

canvasContainer.addEventListener('mouseenter', () => {
  bounds = canvasContainer.getBoundingClientRect();
  document.addEventListener('mousemove', rotateCanvas);
});

canvasContainer.addEventListener('mouseleave', () => {
  document.removeEventListener('mousemove', rotateCanvas);
  canvasContainer.style.transform = '';
  glow.style.backgroundImage = 'radial-gradient(circle at 50% -20%, #ffffff22, #0000000f)';
});

const loginBtn = document.getElementById("loginBtn");
const userInfo = document.getElementById("userInfo"); // div, –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è

auth.onAuthStateChanged((user) => {
  if (user) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.uid);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    initializeHistorySlider();
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –º–µ–Ω—è–µ–º –Ω–∞ "–í—ã–π—Ç–∏", –∏–Ω–∞—á–µ "Logout"
    loginBtn.innerText = currentLanguage === "ru" ? "üë§ –í—ã–π—Ç–∏" : "üë§ Logout";
    // –í—ã–≤–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email
    userInfo.textContent = user.displayName || user.email || "";
  } else {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à—ë–ª
    loginBtn.innerText = currentLanguage === "ru" ? "üë§ –í–æ–π—Ç–∏" : "üë§ Login";
    userInfo.textContent = "";
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
    const historySliderContainer = document.getElementById("historySliderContainer");
    if (historySliderContainer) {
      historySliderContainer.classList.add("d-none");
    }
  }
  updateUILanguage();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Login/Logout
loginBtn.addEventListener("click", () => {
  if (auth.currentUser) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äì –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
    signOut(auth)
      .then(() => {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
        // onAuthStateChanged –æ–±–Ω–æ–≤–∏—Ç UI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", err);
        showModal("logoutErrorModal", 'loginRequired');
      });
  } else {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äì –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞
    const loginModal = new bootstrap.Modal(loginModalEl, {
      backdrop: true, // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "static", –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
      keyboard: true
    });
    loginModal.show();

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏,
    // —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫) backdrop —Ç–æ—á–Ω–æ —É–¥–∞–ª—è–ª—Å—è:
    loginModalEl.addEventListener("hidden.bs.modal", () => {
      // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª–∫—É (–∏–ª–∏ –¥–µ–ª–∞–µ–º –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è)
      // –ï—Å–ª–∏ backdrop –æ—Å—Ç–∞–µ—Ç—Å—è, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å loginModal.dispose();
      loginModal.dispose();
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Google Sign In
// googleSignInBtn.addEventListener("click", async () => {
//   const provider = new GoogleAuthProvider();
//   try {
//     const result = await signInWithPopup(auth, provider);
//     console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", result.user.uid);
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
//     showModal("loginErrorModal", 'loginRequired');
//   }
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Google Sign Out
// googleSignOutBtn.addEventListener("click", async () => {
//   try {
//     await signOut(auth);
//     console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
//     showModal("logoutErrorModal", 'loginRequired');
//   }
// });

function updateUILanguage() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞/–≤—ã—Ö–æ–¥–∞
  if (auth.currentUser) {
    loginBtn.innerText = currentLanguage === "ru" ? "üë§ –í—ã–π—Ç–∏" : "üë§ Logout";
  } else {
    loginBtn.innerText = currentLanguage === "ru" ? "üë§ –í–æ–π—Ç–∏" : "üë§ Login";
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  const loginModalLabel = document.getElementById("loginModalLabel");
  const modalBodyText = document.querySelector("#loginModal .modal-body p");
  // const googleSignInBtn = document.getElementById("googleSignInBtn");
  
  if (currentLanguage === "ru") {
    loginModalLabel.innerText = "–í—Ö–æ–¥";
    modalBodyText.innerText = "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é:";
    // googleSignInBtn.innerText = "Google";
  } else {
    loginModalLabel.innerText = "Login";
    modalBodyText.innerText = "Sign in with:";
    // googleSignInBtn.innerText = "Google";
  }
  
  // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ‚Äì –æ–±–Ω–æ–≤–∏—Ç–µ –∏ –∏—Ö
}

function showModal(modalId, messageKey = null) {
  const modal = document.getElementById(modalId);
  if (modal && messageKey) {
    const modalTitle = modal.querySelector('.modal-title');
    const modalBody = modal.querySelector('.modal-body');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    const translations = modalTranslations[currentLanguage];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (modalTitle) {
      modalTitle.textContent = translations[messageKey] || translations.success;
    }
    if (modalBody) {
      modalBody.textContent = translations[messageKey] || translations.success;
    }
  }
  if (modal) {
    new bootstrap.Modal(modal).show();
  }
}

function showConfirmDeleteModal(onConfirm) {
  const modal = document.getElementById('confirmDeleteModal');
  if (modal) {
    const translations = modalTranslations[currentLanguage];
    const modalTitle = modal.querySelector('.modal-title');
    const modalBody = modal.querySelector('.modal-body');
    const confirmBtn = modal.querySelector('.btn-danger');
    const cancelBtn = modal.querySelector('.btn-secondary');
    
    if (modalTitle) {
      modalTitle.textContent = translations.deleteConfirm;
    }
    if (modalBody) {
      modalBody.textContent = translations.deleteConfirm;
    }
    
    if (confirmBtn) {
      confirmBtn.textContent = translations.delete;
      confirmBtn.onclick = () => {
        // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const modalInstance = bootstrap.Modal.getInstance(modal);
        modalInstance.hide();
        
        // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        onConfirm();
      };
    }
    
    if (cancelBtn) {
      cancelBtn.textContent = translations.cancel || 'Cancel';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ –∫–æ–Ω—Ü–µ
    new bootstrap.Modal(modal).show();
  }
}

function showLoadResultModal(date) {
  document.getElementById("loadResultDate").textContent = date.toLocaleString();
  showModal("loadResultModal", 'loaded');
}

function showLoadResultModal(date) {
  document.getElementById("loadResultDate").textContent = date.toLocaleString();
  showModal("loadResultModal", 'loaded');
}
})(); // –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π

function updateResultsModalTitle() {
  const resultsModalTitle = document.querySelector('#resultsModal .modal-title');
  if (resultsModalTitle) {
    resultsModalTitle.textContent = modalTranslations[currentLanguage].myResults;
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showResultsBtn –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
showResultsBtn.addEventListener("click", async () => {
  if (!auth.currentUser) {
    showModal("authModal", 'loginRequired');
    return;
  }
  
  try {
    const entries = await loadResultsList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    updateResultsModalTitle();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultsList = document.getElementById("resultsList");
    if (resultsList) {
      resultsList.innerHTML = "";
      
      if (entries.length === 0) {
        resultsList.innerHTML = `<p class="text-center">${modalTranslations[currentLanguage].noResults}</p>`;
        return;
      }
      
      entries.forEach((entry, index) => {
        const date = new Date(entry.date);
        const formattedDate = date.toLocaleString();
        
        const entryDiv = document.createElement("div");
        entryDiv.className = "card mb-2";
        entryDiv.innerHTML = `
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
              <span>${formattedDate}</span>
              <div>
                <button class="btn btn-sm btn-primary me-2" data-entry-id="${entry.id}">
                  ${modalTranslations[currentLanguage].load}
                </button>
                <button class="btn btn-sm btn-danger" data-entry-id="${entry.id}">
                  ‚ùå
                </button>
              </div>
            </div>
          </div>
        `;
        
        resultsList.appendChild(entryDiv);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    new bootstrap.Modal(document.getElementById("resultsModal")).show();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelectorAll("#resultsList .btn-primary").forEach(btn => {
      btn.onclick = async () => {
        const data = await loadSavedResult(btn.dataset.entryId);
        if (!data) {
          showModal("loadErrorModal", 'loaded');
          return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        Object.keys(data.spheres).forEach(sphereId => {
          const sphereData = data.spheres[sphereId];
          sphereData.questions.forEach((question, index) => {
            const slider = document.getElementById(`slider_${sphereId}_${index}`);
            if (slider) {
              slider.value = question.value;
              updateSliderDisplay(sphereId, index, question.value);
            }
          });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        document.getElementById("currentDate").textContent = 
          `(${data.date.toLocaleString()})`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        updateSphereAverage(sphereId);
        updateOverallAverage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–µ—Å–æ
        drawWheel();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        showModal("loadSuccessModal", 'loaded');
      };
    });
    
    document.querySelectorAll("#resultsList .btn-danger").forEach(btn => {
      btn.onclick = () => {
        showConfirmDeleteModal(async () => {
          try {
            await deleteSavedResult(btn.dataset.entryId);
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = bootstrap.Modal.getInstance(resultsModalEl);
            modal.hide();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            showResultsBtn.click();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            initializeHistorySlider();
            showModal("deleteSuccessModal", 'deleted');
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
            showModal("deleteErrorModal", 'deleteConfirm');
          }
        });
      };
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
    showModal("loadErrorModal", 'loaded');
  }
});